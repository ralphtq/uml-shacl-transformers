// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package rhapsody.lib.xsd


case class XsdM_hReferencedDiagram(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDiagramOption with XsdIStateChartDiagramOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_lastModifiedTime(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDiagramOption with XsdIStateChartDiagramOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_type(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_style(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_position(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption with XsdCGIPortConnectorOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pRoot(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pParent(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pModelObject(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_name(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGICompartmentOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nOrientationCtrlPt(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nModifyDate(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nIdent(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nCreateDate(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_modified(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_fgColor(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_drawBehavior(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_currentRightBottom(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_currentLeftTop(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIColor(m_fgColor: rhapsody.lib.xsd.XsdM_fgColor,
  m_bgColor: rhapsody.lib.xsd.XsdM_bgColor,
  m_bgFlag: rhapsody.lib.xsd.XsdM_bgFlag,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_displayOption(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_str(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIText(xsdcgitextoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGITextOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

case class XsdCGITextSequence1(m_nHorizontalSpacing: Option[rhapsody.lib.xsd.XsdM_nHorizontalSpacing] = None,
  m_nVerticalSpacing: rhapsody.lib.xsd.XsdM_nVerticalSpacing) extends XsdCGITextOption
      

sealed trait XsdCGITextOption

case class Xsd_iTempdisplayTextFlag(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bIsBoxStyle(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdItems(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIAnnotation(_id: rhapsody.lib.xsd.Xsd_id,
  m_type: rhapsody.lib.xsd.XsdM_type,
  m_pModelObject: rhapsody.lib.xsd.XsdM_pModelObject,
  m_pParent: rhapsody.lib.xsd.XsdM_pParent,
  m_name: rhapsody.lib.xsd.XsdM_name,
  m_drawBehavior: rhapsody.lib.xsd.XsdM_drawBehavior,
  m_transform: rhapsody.lib.xsd.XsdM_transform,
  m_bIsPreferencesInitialized: rhapsody.lib.xsd.XsdM_bIsPreferencesInitialized,
  m_AdditionalLabel: rhapsody.lib.xsd.XsdM_AdditionalLabel,
  m_polygon: rhapsody.lib.xsd.XsdM_polygon,
  m_nNameFormat: rhapsody.lib.xsd.XsdM_nNameFormat,
  m_nIsNameFormat: rhapsody.lib.xsd.XsdM_nIsNameFormat,
  _iTempdisplayTextFlag: rhapsody.lib.xsd.Xsd_iTempdisplayTextFlag,
  m_bIsBoxStyle: rhapsody.lib.xsd.XsdM_bIsBoxStyle,
  AggregatesList: rhapsody.lib.xsd.XsdAggregatesList,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIGenericElement(xsdcgigenericelementoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIGenericElementOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIGenericElementOption

case class XsdCGICompartment(xsdcgicompartmentoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGICompartmentOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGICompartmentOption

case class XsdM_color(IColor: rhapsody.lib.xsd.XsdIColor,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bgFlag(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bgColor(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bScaleWithZoom(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bIsPreferencesInitialized(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bImplicitSetRectPoints(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bFreezeCompartmentContent(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_arrowStyle(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_access(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdElementList(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIComment(xsdicommentoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdICommentOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdICommentOption

case class Xsd_defaultSubsystem(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDiagramOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_properties(IPropertyContainer: rhapsody.lib.xsd.XsdIPropertyContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdIDiagramOption with XsdIClassOption with XsdIStateChartDiagramOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_Value(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIPropertyOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_rmmServerID(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption with XsdICommentOption with XsdCGIDiagramFrameOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIGeneralizationOption with XsdIInformationFlowOption with XsdILiteralSpecificationOption with XsdIPartOption with XsdIPortOption with XsdIRPYRawContainerOption with XsdISysMLPortOption with XsdITagOption with XsdCGIClassOption with XsdCGIClassChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_Type(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIPropertyOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_Name(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIPropertyOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdSubjects(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdProperties(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdMetaclasses(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIPropertySubject(_Name: rhapsody.lib.xsd.Xsd_Name,
  Metaclasses: rhapsody.lib.xsd.XsdMetaclasses,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIRPYRawContainerOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIPropertyMetaclass(_Name: rhapsody.lib.xsd.Xsd_Name,
  Properties: rhapsody.lib.xsd.XsdProperties,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIRPYRawContainerOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIPropertyContainer(Subjects: rhapsody.lib.xsd.XsdSubjects,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_ExtraTypeInfo(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIPropertyOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIProperty(xsdipropertyoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIPropertyOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIRPYRawContainerOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIPropertyOption

case class XsdIMSC(fileName: rhapsody.lib.xsd.XsdFileName,
  _id: rhapsody.lib.xsd.Xsd_id,
  _name: rhapsody.lib.xsd.Xsd_name2,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIsConfigurationFileHyperLink(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_transform(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGITextOption with XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIImageOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_linkTarget(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_linkDispName(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_SubType(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIPortConnectorOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIPortConnector(xsdcgiportconnectoroption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIPortConnectorOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIPortConnectorOption

case class XsdCGIDiagramFrame(xsdcgidiagramframeoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIDiagramFrameOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIDiagramFrameOption

case class XsdIMHyperLink(xsdimhyperlinkoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIMHyperLinkOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIMHyperLinkOption

case class Xsd_textRTF(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDescriptionOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_text(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDescriptionOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_description(IDescription: rhapsody.lib.xsd.XsdIDescription,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdICommentOption with XsdIMHyperLinkOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdISysMLPortOption with XsdIStateOption2 {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIDescription(xsdidescriptionoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIDescriptionOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIDescriptionOption

case class XsdAggregatesList(value: Seq[String] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdIMHyperLinkOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIGeneralizationOption with XsdIInformationFlowOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption2 with XsdIStateChartDiagramOption with XsdCGIClassOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdIStateOption2 with XsdIConstraintOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdSize(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIRPYRawContainerOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdConveyed(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdAssociations(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIAssociationEnd(xsdiassociationendoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIAssociationEndOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIAssociationEndOption

case class XsdIDiagram(xsdidiagramoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIDiagramOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIDiagramOption

case class XsdIAttribute(xsdiattributeoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIAttributeOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIAttributeOption

case class XsdIClass(xsdiclassoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIClassOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption with Xsd_implicitClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIClassOption

case class XsdIClassifierHandle(xsdiclassifierhandleoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIClassifierHandleOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIClassifierHandleOption

case class XsdIDependency(xsdidependencyoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIDependencyOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIDependencyOption

case class Xsd_defNumber(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_version(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_baseVersion(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_diagram(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIStateChart(xsdistatechartoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIStateChartOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIStateChartOption

case class XsdIGeneralization(xsdigeneralizationoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIGeneralizationOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIGeneralizationOption

case class XsdIHandle(xsdihandlesequence1: Option[rhapsody.lib.xsd.XsdIHandleSequence1] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIRPYRawContainerOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIHandleOption
case class XsdIHandleSequence1(_hm2Class: rhapsody.lib.xsd.Xsd_hm2Class,
  xsdihandleoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIHandleOption]] = Nil)
      


case class XsdIInformationFlow(xsdiinformationflowoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIInformationFlowOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIInformationFlowOption

case class XsdILiteralSpecification(xsdiliteralspecificationoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdILiteralSpecificationOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption with Xsd_implicitClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdILiteralSpecificationOption

case class XsdINObjectHandle(xsdinobjecthandlesequence1: Option[rhapsody.lib.xsd.XsdINObjectHandleSequence1] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdINObjectHandleOption
case class XsdINObjectHandleSequence2(_hfilename: rhapsody.lib.xsd.Xsd_hfilename,
  _hsubsystem: rhapsody.lib.xsd.Xsd_hsubsystem,
  _hclass: Option[rhapsody.lib.xsd.Xsd_hclass] = None,
  _hname: rhapsody.lib.xsd.Xsd_hname,
  _hid: rhapsody.lib.xsd.Xsd_hid) extends XsdINObjectHandleOption
      

case class XsdINObjectHandleSequence1(_hm2Class: rhapsody.lib.xsd.Xsd_hm2Class,
  xsdinobjecthandleoption: scalaxb.DataRecord[rhapsody.lib.xsd.XsdINObjectHandleOption])
      


case class XsdIPart(xsdipartoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIPartOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIPartOption

case class XsdIPort(xsdiportoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIPortOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIPortOption

case class XsdIRPYRawContainer(xsdirpyrawcontaineroption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIRPYRawContainerOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIRPYRawContainerOption

case class XsdISysMLPort(xsdisysmlportoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdISysMLPortOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption with Xsd_implicitClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdISysMLPortOption

case class XsdITag(xsditagoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdITagOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption with Xsd_implicitClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdITagOption
sealed trait XsdITagOption2 extends XsdITagOption

case class XsdIStateChartDiagram(xsdistatechartdiagramoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIStateChartDiagramOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIStateChartDiagramOption

case class XsdMagicNumber()
      
      


case class XsdOslcLinks(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdOwnedDependencies(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption with XsdIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdOperations(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_AdditionalLabel(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nNameFormat(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nIsNameFormat(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bFramesetModified(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdFrameset(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIClassOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_anglePoint1(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_anglePoint2(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_ShowName(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_ShowStereotype(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_SourcePort(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_TargetPort(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_arrow(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_polygon(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIDiagramFrameOption with XsdCGIClassOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIImageData(_id: rhapsody.lib.xsd.Xsd_id,
  m_type: rhapsody.lib.xsd.XsdM_type,
  m_pModelObject: rhapsody.lib.xsd.XsdM_pModelObject,
  m_pParent: rhapsody.lib.xsd.XsdM_pParent,
  m_name: rhapsody.lib.xsd.XsdM_name,
  m_drawBehavior: rhapsody.lib.xsd.XsdM_drawBehavior,
  m_bIsPreferencesInitialized: rhapsody.lib.xsd.XsdM_bIsPreferencesInitialized,
  m_dataSize: rhapsody.lib.xsd.XsdM_dataSize,
  m_data: rhapsody.lib.xsd.XsdM_data,
  m_srcFile: rhapsody.lib.xsd.XsdM_srcFile,
  m_fileModifiedTime: rhapsody.lib.xsd.XsdM_fileModifiedTime,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIObjectInstance(_id: rhapsody.lib.xsd.Xsd_id,
  m_type: rhapsody.lib.xsd.XsdM_type,
  m_pModelObject: rhapsody.lib.xsd.XsdM_pModelObject,
  m_pParent: rhapsody.lib.xsd.XsdM_pParent,
  m_name: rhapsody.lib.xsd.XsdM_name,
  m_drawBehavior: rhapsody.lib.xsd.XsdM_drawBehavior,
  m_transform: rhapsody.lib.xsd.XsdM_transform,
  m_bIsPreferencesInitialized: rhapsody.lib.xsd.XsdM_bIsPreferencesInitialized,
  m_AdditionalLabel: rhapsody.lib.xsd.XsdM_AdditionalLabel,
  m_polygon: rhapsody.lib.xsd.XsdM_polygon,
  m_nNameFormat: rhapsody.lib.xsd.XsdM_nNameFormat,
  m_nIsNameFormat: rhapsody.lib.xsd.XsdM_nIsNameFormat,
  Attrs: rhapsody.lib.xsd.XsdAttrs,
  Operations: rhapsody.lib.xsd.XsdOperations,
  m_multiplicity: rhapsody.lib.xsd.XsdM_multiplicity,
  AggregatesList: rhapsody.lib.xsd.XsdAggregatesList,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIClass(_id: rhapsody.lib.xsd.Xsd_id,
  xsdcgiclassoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIClassOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIClassOption

case class XsdAttrs(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_conveyed(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_itsTarget(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowKeyword(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_itsSource(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_staticReaction(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIState(xsdcgistateoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIStateOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIStateOption

case class XsdCGIStateChart(_id: rhapsody.lib.xsd.Xsd_id,
  m_type: rhapsody.lib.xsd.XsdM_type,
  m_pModelObject: rhapsody.lib.xsd.XsdM_pModelObject,
  m_pParent: rhapsody.lib.xsd.XsdM_pParent,
  m_name: rhapsody.lib.xsd.XsdM_name,
  m_drawBehavior: rhapsody.lib.xsd.XsdM_drawBehavior,
  m_bIsPreferencesInitialized: rhapsody.lib.xsd.XsdM_bIsPreferencesInitialized,
  elementList: rhapsody.lib.xsd.XsdElementList,
  m_access: rhapsody.lib.xsd.XsdM_access,
  m_modified: rhapsody.lib.xsd.XsdM_modified,
  m_nModifyDate: rhapsody.lib.xsd.XsdM_nModifyDate,
  m_nCreateDate: rhapsody.lib.xsd.XsdM_nCreateDate,
  m_bScaleWithZoom: rhapsody.lib.xsd.XsdM_bScaleWithZoom,
  m_arrowStyle: rhapsody.lib.xsd.XsdM_arrowStyle,
  m_pRoot: rhapsody.lib.xsd.XsdM_pRoot,
  m_currentLeftTop: rhapsody.lib.xsd.XsdM_currentLeftTop,
  m_currentRightBottom: rhapsody.lib.xsd.XsdM_currentRightBottom,
  m_bFreezeCompartmentContent: rhapsody.lib.xsd.XsdM_bFreezeCompartmentContent,
  m_pInheritsFrom: rhapsody.lib.xsd.XsdM_pInheritsFrom,
  AggregatesList: rhapsody.lib.xsd.XsdAggregatesList,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIClassChart(xsdcgiclasschartoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIClassChartOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIClassChartOption

case class XsdCGIImage(xsdcgiimageoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIImageOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIImageOption

case class XsdCGIInheritance(xsdcgiinheritanceoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIInheritanceOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIInheritanceOption

case class XsdCGITrans(_id: rhapsody.lib.xsd.Xsd_id,
  m_type: rhapsody.lib.xsd.XsdM_type,
  m_pModelObject: rhapsody.lib.xsd.XsdM_pModelObject,
  m_pParent: rhapsody.lib.xsd.XsdM_pParent,
  m_name: rhapsody.lib.xsd.XsdM_name,
  m_drawBehavior: rhapsody.lib.xsd.XsdM_drawBehavior,
  m_bIsPreferencesInitialized: rhapsody.lib.xsd.XsdM_bIsPreferencesInitialized,
  m_pSource: rhapsody.lib.xsd.XsdM_pSource,
  m_sourceType: rhapsody.lib.xsd.XsdM_sourceType,
  m_pTarget: rhapsody.lib.xsd.XsdM_pTarget,
  m_targetType: rhapsody.lib.xsd.XsdM_targetType,
  m_direction: rhapsody.lib.xsd.XsdM_direction,
  m_rpn: rhapsody.lib.xsd.XsdM_rpn,
  m_anglePoint1: rhapsody.lib.xsd.XsdM_anglePoint1,
  m_anglePoint2: rhapsody.lib.xsd.XsdM_anglePoint2,
  m_line_style: rhapsody.lib.xsd.XsdM_line_style,
  m_SourcePort: rhapsody.lib.xsd.XsdM_SourcePort,
  m_TargetPort: rhapsody.lib.xsd.XsdM_TargetPort,
  m_pInheritsFrom: rhapsody.lib.xsd.XsdM_pInheritsFrom,
  m_nInheritanceMask: rhapsody.lib.xsd.XsdM_nInheritanceMask,
  m_bShowName: rhapsody.lib.xsd.XsdM_bShowName,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIInformationFlow(xsdcgiinformationflowoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIInformationFlowOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIInformationFlowOption

case class XsdITransition(_id: rhapsody.lib.xsd.Xsd_id,
  _myState: rhapsody.lib.xsd.Xsd_myState,
  _name: rhapsody.lib.xsd.Xsd_name2,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  _itsTarget: rhapsody.lib.xsd.Xsd_itsTarget,
  _staticReaction: rhapsody.lib.xsd.Xsd_staticReaction,
  _itsSource: rhapsody.lib.xsd.Xsd_itsSource,
  AggregatesList: rhapsody.lib.xsd.XsdAggregatesList,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdILabel(_id: rhapsody.lib.xsd.Xsd_id,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  _itsTrigger: String,
  _itsGuard: String,
  _itsAction: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdRHAPSODYu45MODEL(xsdrhapsodyu45modeloption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdRHAPSODYu45MODELOption]] = Nil)
      
      

sealed trait XsdRHAPSODYu45MODELOption

case class XsdRhapsodyArchive(MagicNumber: rhapsody.lib.xsd.XsdMagicNumber,
  CODEu45PAGE: Short,
  version: String,
  lang: String,
  BuildNo: Long,
  RMMMinimumClientVersion: Option[BigDecimal] = None,
  RHAPSODYu45MODEL: rhapsody.lib.xsd.XsdRHAPSODYu45MODEL,
  OslcLinks: rhapsody.lib.xsd.XsdOslcLinks,
  INCLUDESu45RHAPSODYu45INDEX: Boolean)
      
      


case class XsdIState(xsdistateoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIStateOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIStateOption
sealed trait XsdIStateOption2 extends XsdIStateOption

case class XsdStereotypes(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIInformationFlowOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdIStateOption2 with XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_base(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdITagOption2 {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_classModifier(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption with XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_dependent(INObjectHandle: rhapsody.lib.xsd.XsdINObjectHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDependencyOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_dependsOn(INObjectHandle: rhapsody.lib.xsd.XsdINObjectHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption with XsdIDependencyOption with XsdIGeneralizationOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_direction(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdISysMLPortOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_displayName(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIInformationFlowOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption with XsdIStateChartDiagramOption with XsdIStateOption2 with XsdIConstraintOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_hclass(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassifierHandleOption with XsdIHandleOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_hfilename(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassifierHandleOption with XsdIHandleOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_hid(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassifierHandleOption with XsdIHandleOption with XsdINObjectHandleOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_hm2Class(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassifierHandleOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_hname(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassifierHandleOption with XsdIHandleOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_hsubsystem(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassifierHandleOption with XsdIHandleOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_id(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGICompartmentOption with XsdICommentOption with XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption with XsdIMHyperLinkOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIGeneralizationOption with XsdIInformationFlowOption with XsdILiteralSpecificationOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption with XsdIStateChartDiagramOption with XsdCGIStateOption with XsdCGIClassChartOption with XsdCGIImageOption with XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdIStateOption with XsdIConstraintOption with XsdIForkOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_implicitClass(xsd_implicitclassoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.Xsd_implicitClassOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdISysMLPortOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait Xsd_implicitClassOption

case class Xsd_inheritanceType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIGeneralizationOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_inverse(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAssociationEndOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_isConstant(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_isOrdered(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption with XsdITagOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_isReferenceAttr(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_isVirtual(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIGeneralizationOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_itsStateChart(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption with XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_lastID(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption with XsdIClassOption with XsdIStateChartOption with XsdISysMLPortOption with XsdIConstraintOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_linkType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIMHyperLinkOption with XsdIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_modifiedTime(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdICommentOption with XsdIMHyperLinkOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIGeneralizationOption with XsdIInformationFlowOption with XsdILiteralSpecificationOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption with XsdIStateChartDiagramOption with XsdIStateOption2 with XsdIConstraintOption with XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_modifiedTimeWeak(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdICommentOption with XsdIMHyperLinkOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIGeneralizationOption with XsdIInformationFlowOption with XsdILiteralSpecificationOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption with XsdIStateChartDiagramOption with XsdIStateOption2 with XsdIConstraintOption with XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_multiplicity(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAssociationEndOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_myState(value: Short,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdICommentOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIInformationFlowOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption with XsdIStateChartDiagramOption with XsdIStateOption2 with XsdIConstraintOption with XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_name2(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdICommentOption with XsdIAssociationEndOption with XsdIDiagramOption with XsdIAttributeOption with XsdIClassOption with XsdIDependencyOption with XsdIStateChartOption with XsdIInformationFlowOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption with XsdITagOption with XsdIStateChartDiagramOption with XsdIStateOption2 with XsdIConstraintOption with XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_navigability(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_otherClass(IClassifierHandle: rhapsody.lib.xsd.XsdIClassifierHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAssociationEndOption with XsdIPartOption with XsdIPortOption with XsdISysMLPortOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_protection(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_static(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_theMainDiagram(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_typeOf(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption with XsdITagOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_value2(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdILiteralSpecificationOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdDirectionu93(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdEnd1u93(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdEnd2u93(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdFileName(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption with XsdIPartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdStrongCGTime(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption with XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdWeakCGTime(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption with XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_data(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_dataSize(value: Int,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_direction(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_fileModifiedTime(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_flow_direction(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_keyword(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_line_style(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nHorizontalSpacing(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nInheritanceMask(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIPortConnectorOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_nVerticalSpacing(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pImageViewData(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIImageOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pInheritsFrom(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIPortConnectorOption with XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pSource(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pTarget(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_points(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIImageOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_providedInterfaceLabel(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIPortConnectorOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_requiredInterfaceLabel(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIPortConnectorOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_rpn(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_showConveyed(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_sourceType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_srcFile(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_targetType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIInheritanceOption with XsdCGIInformationFlowOption with XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bOrdered(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowInherited(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_itemValueOfFontPropertiesMapCount(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_fontPropValues(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGICompartmentOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_parent(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateOption2 with XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_defaultTrans(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateOption2 {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdHyperlinks(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIDescriptionOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIInternalHyperlink(_name: rhapsody.lib.xsd.Xsd_name2,
  _textType: rhapsody.lib.xsd.Xsd_textType,
  _target: rhapsody.lib.xsd.Xsd_target,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIRPYRawContainerOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_target(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_textType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdNAndLineCount(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pDefaultComponentRelation(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowName(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_multiplicity(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_csContext(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bIsStructured(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_csPartsArray(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdPorts(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIConstraint(xsdiconstraintoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIConstraintOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIConstraintOption

case class Xsd_body(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIConstraintOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIDefaultDrvdTrans(_id: rhapsody.lib.xsd.Xsd_id,
  _myState: rhapsody.lib.xsd.Xsd_myState,
  _name: rhapsody.lib.xsd.Xsd_name2,
  Stereotypes: rhapsody.lib.xsd.XsdStereotypes,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  _errorStatus: rhapsody.lib.xsd.Xsd_errorStatus,
  _itsTarget: rhapsody.lib.xsd.Xsd_itsTarget,
  _staticReaction: rhapsody.lib.xsd.Xsd_staticReaction,
  _itsSource: rhapsody.lib.xsd.Xsd_itsSource,
  _ofState: rhapsody.lib.xsd.Xsd_ofState,
  AggregatesList: rhapsody.lib.xsd.XsdAggregatesList,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_errorStatus(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_ofState(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIFork(xsdiforkoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdIForkOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdIForkOption

case class Xsd_connectorType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIForkOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIConnector(_id: rhapsody.lib.xsd.Xsd_id,
  m_type: rhapsody.lib.xsd.XsdM_type,
  m_pModelObject: rhapsody.lib.xsd.XsdM_pModelObject,
  m_pParent: rhapsody.lib.xsd.XsdM_pParent,
  m_name: rhapsody.lib.xsd.XsdM_name,
  m_drawBehavior: rhapsody.lib.xsd.XsdM_drawBehavior,
  m_transform: rhapsody.lib.xsd.XsdM_transform,
  m_bIsPreferencesInitialized: rhapsody.lib.xsd.XsdM_bIsPreferencesInitialized,
  m_position: rhapsody.lib.xsd.XsdM_position,
  m_pInheritsFrom: rhapsody.lib.xsd.XsdM_pInheritsFrom,
  m_nInheritanceMask: rhapsody.lib.xsd.XsdM_nInheritanceMask,
  m_SubType: rhapsody.lib.xsd.XsdM_SubType,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdTags(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIAttributeOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bVisible(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIPortConnectorOption with XsdCGIDiagramFrameOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIObjectLinkHandle(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pInstance(IObjectLinkHandle: rhapsody.lib.xsd.XsdIObjectLinkHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pInverseInstance(IObjectLinkHandle: rhapsody.lib.xsd.XsdIObjectLinkHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIAssociationEndHandle(_hm2Class: rhapsody.lib.xsd.Xsd_hm2Class,
  _hfilename: rhapsody.lib.xsd.Xsd_hfilename,
  _hsubsystem: rhapsody.lib.xsd.Xsd_hsubsystem,
  _hclass: rhapsody.lib.xsd.Xsd_hclass,
  _hname: rhapsody.lib.xsd.Xsd_hname,
  _hid: rhapsody.lib.xsd.Xsd_hid,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pInverseModelObject(IAssociationEndHandle: rhapsody.lib.xsd.XsdIAssociationEndHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowSourceMultiplicity(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowSourceRole(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowSpecificType(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowTargetMultiplicity(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowTargetRole(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowLinkName(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowQualifier1(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bShowQualifier2(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_bInstance(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_sourceMultiplicity(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_sourceQualifier(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_sourceRole(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_specificType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_targetMultiplicity(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_targetQualifier(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_targetRole(CGIText: rhapsody.lib.xsd.XsdCGIText,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIAssociationEndOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdCGIAssociationEnd(xsdcgiassociationendoption: Seq[scalaxb.DataRecord[rhapsody.lib.xsd.XsdCGIAssociationEndOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

sealed trait XsdCGIAssociationEndOption

case class XsdM_bIsMisplaced(value: Byte,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIGenericElementOption with XsdCGIClassOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIAnchor(_id: rhapsody.lib.xsd.Xsd_id,
  _myState: rhapsody.lib.xsd.Xsd_myState,
  _name: rhapsody.lib.xsd.Xsd_name2,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  _dependsOn: rhapsody.lib.xsd.Xsd_dependsOn,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_moveAndLineTimeStamp(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIInformationItem(_id: rhapsody.lib.xsd.Xsd_id,
  _myState: rhapsody.lib.xsd.Xsd_myState,
  _name: rhapsody.lib.xsd.Xsd_name2,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_stateType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateOption2 {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdAndLinePoly(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdM_pVirtualParent(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdCGIStateOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdTransitions(IRPYRawContainer: rhapsody.lib.xsd.XsdIRPYRawContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIStateChartOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdEnd1ObjectPortu93(IHandle: rhapsody.lib.xsd.XsdIHandle,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdIInformationFlowOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIInstanceValue(_id: rhapsody.lib.xsd.Xsd_id,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  _value: rhapsody.lib.xsd.Xsd_value2,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class XsdIType(_id: rhapsody.lib.xsd.Xsd_id,
  _myState: rhapsody.lib.xsd.Xsd_myState,
  _modifiedTimeWeak: rhapsody.lib.xsd.Xsd_modifiedTimeWeak,
  _modifiedTime: rhapsody.lib.xsd.Xsd_modifiedTime,
  _declaration: rhapsody.lib.xsd.Xsd_declaration,
  _kind: rhapsody.lib.xsd.Xsd_kind,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends XsdRHAPSODYu45MODELOption {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_declaration(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      


case class Xsd_kind(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val typeValue = attributes("@type").as[String]
}

      
      

