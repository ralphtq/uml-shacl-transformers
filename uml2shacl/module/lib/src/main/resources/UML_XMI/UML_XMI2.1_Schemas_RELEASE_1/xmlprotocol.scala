// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package umlxmi2pt1

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[umlxmi2pt1.Foo](node)
val document = scalaxb.toXML[umlxmi2pt1.Foo](obj, "foo", umlxmi2pt1.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://schema.omg.org/spec/XMI/2.1",
    Some("uml") -> "http://schema.omg.org/spec/UML/2.1",
    Some("xmi") -> "http://schema.omg.org/spec/XMI/2.1",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Umlxmi2pt1_XMIFormat: scalaxb.XMLFormat[umlxmi2pt1.XMI] = new DefaultUmlxmi2pt1_XMIFormat {}
  implicit lazy val Umlxmi2pt1_Documentation2Format: scalaxb.XMLFormat[umlxmi2pt1.Documentation2] = new DefaultUmlxmi2pt1_Documentation2Format {}
  implicit lazy val Umlxmi2pt1_ExtensionFormat: scalaxb.XMLFormat[umlxmi2pt1.Extension] = new DefaultUmlxmi2pt1_ExtensionFormat {}
  implicit lazy val Umlxmi2pt1_ConnectorsFormat: scalaxb.XMLFormat[umlxmi2pt1.Connectors] = new DefaultUmlxmi2pt1_ConnectorsFormat {}
  implicit lazy val Umlxmi2pt1_ConnectorFormat: scalaxb.XMLFormat[umlxmi2pt1.Connector] = new DefaultUmlxmi2pt1_ConnectorFormat {}
  implicit lazy val Umlxmi2pt1_PackagedElementFormat: scalaxb.XMLFormat[umlxmi2pt1.PackagedElement] = new DefaultUmlxmi2pt1_PackagedElementFormat {}
  implicit lazy val Umlxmi2pt1_OwnedLiteralFormat: scalaxb.XMLFormat[umlxmi2pt1.OwnedLiteral] = new DefaultUmlxmi2pt1_OwnedLiteralFormat {}
  implicit lazy val Umlxmi2pt1_MemberEndFormat: scalaxb.XMLFormat[umlxmi2pt1.MemberEnd] = new DefaultUmlxmi2pt1_MemberEndFormat {}
  implicit lazy val Umlxmi2pt1_OwnedEndFormat: scalaxb.XMLFormat[umlxmi2pt1.OwnedEnd] = new DefaultUmlxmi2pt1_OwnedEndFormat {}
  implicit lazy val Umlxmi2pt1_OwnedEndSequence1Format: scalaxb.XMLFormat[umlxmi2pt1.OwnedEndSequence1] = new DefaultUmlxmi2pt1_OwnedEndSequence1Format {}
  implicit lazy val Umlxmi2pt1_GeneralizationFormat: scalaxb.XMLFormat[umlxmi2pt1.Generalization] = new DefaultUmlxmi2pt1_GeneralizationFormat {}
  implicit lazy val Umlxmi2pt1_OwnedAttributeFormat: scalaxb.XMLFormat[umlxmi2pt1.OwnedAttribute] = new DefaultUmlxmi2pt1_OwnedAttributeFormat {}
  implicit lazy val Umlxmi2pt1_DefaultValueFormat: scalaxb.XMLFormat[umlxmi2pt1.DefaultValue] = new DefaultUmlxmi2pt1_DefaultValueFormat {}
  implicit lazy val Umlxmi2pt1_ElementsFormat: scalaxb.XMLFormat[umlxmi2pt1.Elements] = new DefaultUmlxmi2pt1_ElementsFormat {}
  implicit lazy val Umlxmi2pt1_ElementFormat: scalaxb.XMLFormat[umlxmi2pt1.Element] = new DefaultUmlxmi2pt1_ElementFormat {}
  implicit lazy val Umlxmi2pt1_ElementSequence2Format: scalaxb.XMLFormat[umlxmi2pt1.ElementSequence2] = new DefaultUmlxmi2pt1_ElementSequence2Format {}
  implicit lazy val Umlxmi2pt1_ElementSequence3Format: scalaxb.XMLFormat[umlxmi2pt1.ElementSequence3] = new DefaultUmlxmi2pt1_ElementSequence3Format {}
  implicit lazy val Umlxmi2pt1_ElementSequence1Format: scalaxb.XMLFormat[umlxmi2pt1.ElementSequence1] = new DefaultUmlxmi2pt1_ElementSequence1Format {}
  implicit lazy val Umlxmi2pt1_CodeFormat: scalaxb.XMLFormat[umlxmi2pt1.Code] = new DefaultUmlxmi2pt1_CodeFormat {}
  implicit lazy val Umlxmi2pt1_ModelDocumentFormat: scalaxb.XMLFormat[umlxmi2pt1.ModelDocument] = new DefaultUmlxmi2pt1_ModelDocumentFormat {}
  implicit lazy val Umlxmi2pt1_PackagepropertiesFormat: scalaxb.XMLFormat[umlxmi2pt1.Packageproperties] = new DefaultUmlxmi2pt1_PackagepropertiesFormat {}
  implicit lazy val Umlxmi2pt1_PathsFormat: scalaxb.XMLFormat[umlxmi2pt1.Paths] = new DefaultUmlxmi2pt1_PathsFormat {}
  implicit lazy val Umlxmi2pt1_TimesFormat: scalaxb.XMLFormat[umlxmi2pt1.Times] = new DefaultUmlxmi2pt1_TimesFormat {}
  implicit lazy val Umlxmi2pt1_FlagsFormat: scalaxb.XMLFormat[umlxmi2pt1.Flags] = new DefaultUmlxmi2pt1_FlagsFormat {}
  implicit lazy val Umlxmi2pt1_AttributesTypeFormat: scalaxb.XMLFormat[umlxmi2pt1.AttributesType] = new DefaultUmlxmi2pt1_AttributesTypeFormat {}
  implicit lazy val Umlxmi2pt1_AttributeFormat: scalaxb.XMLFormat[umlxmi2pt1.Attribute] = new DefaultUmlxmi2pt1_AttributeFormat {}
  implicit lazy val Umlxmi2pt1_InitialFormat: scalaxb.XMLFormat[umlxmi2pt1.Initial] = new DefaultUmlxmi2pt1_InitialFormat {}
  implicit lazy val Umlxmi2pt1_CoordsFormat: scalaxb.XMLFormat[umlxmi2pt1.Coords] = new DefaultUmlxmi2pt1_CoordsFormat {}
  implicit lazy val Umlxmi2pt1_ContainmentFormat: scalaxb.XMLFormat[umlxmi2pt1.Containment] = new DefaultUmlxmi2pt1_ContainmentFormat {}
  implicit lazy val Umlxmi2pt1_StereotypeFormat: scalaxb.XMLFormat[umlxmi2pt1.Stereotype] = new DefaultUmlxmi2pt1_StereotypeFormat {}
  implicit lazy val Umlxmi2pt1_BoundsFormat: scalaxb.XMLFormat[umlxmi2pt1.Bounds] = new DefaultUmlxmi2pt1_BoundsFormat {}
  implicit lazy val Umlxmi2pt1_OptionsFormat: scalaxb.XMLFormat[umlxmi2pt1.Options] = new DefaultUmlxmi2pt1_OptionsFormat {}
  implicit lazy val Umlxmi2pt1_StyleexFormat: scalaxb.XMLFormat[umlxmi2pt1.Styleex] = new DefaultUmlxmi2pt1_StyleexFormat {}
  implicit lazy val Umlxmi2pt1_LinksFormat: scalaxb.XMLFormat[umlxmi2pt1.Links] = new DefaultUmlxmi2pt1_LinksFormat {}
  implicit lazy val Umlxmi2pt1_AbstractionFormat: scalaxb.XMLFormat[umlxmi2pt1.Abstraction] = new DefaultUmlxmi2pt1_AbstractionFormat {}
  implicit lazy val Umlxmi2pt1_AggregationFormat: scalaxb.XMLFormat[umlxmi2pt1.Aggregation] = new DefaultUmlxmi2pt1_AggregationFormat {}
  implicit lazy val Umlxmi2pt1_AssociationFormat: scalaxb.XMLFormat[umlxmi2pt1.Association] = new DefaultUmlxmi2pt1_AssociationFormat {}
  implicit lazy val Umlxmi2pt1_DependencyFormat: scalaxb.XMLFormat[umlxmi2pt1.Dependency] = new DefaultUmlxmi2pt1_DependencyFormat {}
  implicit lazy val Umlxmi2pt1_Generalization2Format: scalaxb.XMLFormat[umlxmi2pt1.Generalization2] = new DefaultUmlxmi2pt1_Generalization2Format {}
  implicit lazy val Umlxmi2pt1_NoteLinkFormat: scalaxb.XMLFormat[umlxmi2pt1.NoteLink] = new DefaultUmlxmi2pt1_NoteLinkFormat {}
  implicit lazy val Umlxmi2pt1_ModelFormat: scalaxb.XMLFormat[umlxmi2pt1.Model] = new DefaultUmlxmi2pt1_ModelFormat {}
  implicit lazy val Umlxmi2pt1_RoleFormat: scalaxb.XMLFormat[umlxmi2pt1.Role] = new DefaultUmlxmi2pt1_RoleFormat {}
  implicit lazy val Umlxmi2pt1_TypeFormat: scalaxb.XMLFormat[umlxmi2pt1.Type] = new DefaultUmlxmi2pt1_TypeFormat {}
  implicit lazy val Umlxmi2pt1_ConstraintsFormat: scalaxb.XMLFormat[umlxmi2pt1.Constraints] = new DefaultUmlxmi2pt1_ConstraintsFormat {}
  implicit lazy val Umlxmi2pt1_ModifiersFormat: scalaxb.XMLFormat[umlxmi2pt1.Modifiers] = new DefaultUmlxmi2pt1_ModifiersFormat {}
  implicit lazy val Umlxmi2pt1_StyleFormat: scalaxb.XMLFormat[umlxmi2pt1.Style] = new DefaultUmlxmi2pt1_StyleFormat {}
  implicit lazy val Umlxmi2pt1_DocumentationFormat: scalaxb.XMLFormat[umlxmi2pt1.Documentation] = new DefaultUmlxmi2pt1_DocumentationFormat {}
  implicit lazy val Umlxmi2pt1_XrefsFormat: scalaxb.XMLFormat[umlxmi2pt1.Xrefs] = new DefaultUmlxmi2pt1_XrefsFormat {}
  implicit lazy val Umlxmi2pt1_TagsFormat: scalaxb.XMLFormat[umlxmi2pt1.Tags] = new DefaultUmlxmi2pt1_TagsFormat {}
  implicit lazy val Umlxmi2pt1_TagFormat: scalaxb.XMLFormat[umlxmi2pt1.Tag] = new DefaultUmlxmi2pt1_TagFormat {}
  implicit lazy val Umlxmi2pt1_PropertiesFormat: scalaxb.XMLFormat[umlxmi2pt1.Properties] = new DefaultUmlxmi2pt1_PropertiesFormat {}
  implicit lazy val Umlxmi2pt1_ExtendedPropertiesFormat: scalaxb.XMLFormat[umlxmi2pt1.ExtendedProperties] = new DefaultUmlxmi2pt1_ExtendedPropertiesFormat {}
  implicit lazy val Umlxmi2pt1_OwnedCommentFormat: scalaxb.XMLFormat[umlxmi2pt1.OwnedComment] = new DefaultUmlxmi2pt1_OwnedCommentFormat {}
  implicit lazy val Umlxmi2pt1_AnnotatedElementFormat: scalaxb.XMLFormat[umlxmi2pt1.AnnotatedElement] = new DefaultUmlxmi2pt1_AnnotatedElementFormat {}
  implicit lazy val Umlxmi2pt1_ProjectFormat: scalaxb.XMLFormat[umlxmi2pt1.Project] = new DefaultUmlxmi2pt1_ProjectFormat {}
  implicit lazy val Umlxmi2pt1_LowerValueFormat: scalaxb.XMLFormat[umlxmi2pt1.LowerValue] = new DefaultUmlxmi2pt1_LowerValueFormat {}
  implicit lazy val Umlxmi2pt1_UpperValueFormat: scalaxb.XMLFormat[umlxmi2pt1.UpperValue] = new DefaultUmlxmi2pt1_UpperValueFormat {}
  implicit lazy val Umlxmi2pt1_Idref1Format: scalaxb.AttributeGroupFormat[umlxmi2pt1.Idref1] = new DefaultUmlxmi2pt1_Idref1Format {}
  implicit lazy val Umlxmi2pt1_IdFormat: scalaxb.AttributeGroupFormat[umlxmi2pt1.Id] = new DefaultUmlxmi2pt1_IdFormat {}
  implicit lazy val Umlxmi2pt1_IdrefFormat: scalaxb.AttributeGroupFormat[umlxmi2pt1.Idref] = new DefaultUmlxmi2pt1_IdrefFormat {}
  implicit lazy val Umlxmi2pt1_Id2Format: scalaxb.AttributeGroupFormat[umlxmi2pt1.Id2] = new DefaultUmlxmi2pt1_Id2Format {}
  implicit lazy val Umlxmi2pt1_Id1Format: scalaxb.AttributeGroupFormat[umlxmi2pt1.Id1] = new DefaultUmlxmi2pt1_Id1Format {}
  implicit lazy val Umlxmi2pt1_Model2Format: scalaxb.XMLFormat[umlxmi2pt1.Model2] = new DefaultUmlxmi2pt1_Model2Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Extension"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Extension](elem)))
      case (Some("XMI"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.XMI](elem)))
      case (Some("Documentation"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Documentation2](elem)))
      case (Some("upperValue"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.UpperValue](elem)))
      case (Some("project"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Project](elem)))
      case (Some("annotatedElement"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.AnnotatedElement](elem)))
      case (Some("extendedProperties"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.ExtendedProperties](elem)))
      case (Some("tag"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Tag](elem)))
      case (Some("xrefs"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Xrefs](elem)))
      case (Some("style"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Style](elem)))
      case (Some("constraints"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Constraints](elem)))
      case (Some("role"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Role](elem)))
      case (Some("NoteLink"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.NoteLink](elem)))
      case (Some("Dependency"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Dependency](elem)))
      case (Some("Aggregation"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Aggregation](elem)))
      case (Some("links"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Links](elem)))
      case (Some("options"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Options](elem)))
      case (Some("stereotype"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Stereotype](elem)))
      case (Some("coords"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Coords](elem)))
      case (Some("attribute"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Attribute](elem)))
      case (Some("flags"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Flags](elem)))
      case (Some("paths"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Paths](elem)))
      case (Some("modelDocument"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.ModelDocument](elem)))
      case (Some("element"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Element](elem)))
      case (Some("defaultValue"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.DefaultValue](elem)))
      case (Some("generalization"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Generalization](elem)))
      case (Some("memberEnd"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.MemberEnd](elem)))
      case (Some("packagedElement"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.PackagedElement](elem)))
      case (Some("connectors"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Connectors](elem)))
      case (Some("connector"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Connector](elem)))
      case (Some("ownedLiteral"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.OwnedLiteral](elem)))
      case (Some("ownedEnd"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.OwnedEnd](elem)))
      case (Some("ownedAttribute"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.OwnedAttribute](elem)))
      case (Some("elements"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Elements](elem)))
      case (Some("code"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Code](elem)))
      case (Some("packageproperties"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Packageproperties](elem)))
      case (Some("times"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Times](elem)))
      case (Some("attributes"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.AttributesType](elem)))
      case (Some("initial"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Initial](elem)))
      case (Some("containment"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Containment](elem)))
      case (Some("bounds"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Bounds](elem)))
      case (Some("styleex"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Styleex](elem)))
      case (Some("Abstraction"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Abstraction](elem)))
      case (Some("Association"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Association](elem)))
      case (Some("Generalization"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Generalization2](elem)))
      case (Some("model"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Model](elem)))
      case (Some("type"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Type](elem)))
      case (Some("modifiers"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Modifiers](elem)))
      case (Some("documentation"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Documentation](elem)))
      case (Some("tags"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Tags](elem)))
      case (Some("properties"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Properties](elem)))
      case (Some("ownedComment"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.OwnedComment](elem)))
      case (Some("body"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("lowerValue"), Some("http://schema.omg.org/spec/XMI/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.LowerValue](elem)))
      case (Some("Model"), Some("http://schema.omg.org/spec/UML/2.1") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[umlxmi2pt1.Model2](elem)))

      case _ => None
    }


  }

  trait DefaultUmlxmi2pt1_XMIFormat extends scalaxb.ElemNameParser[umlxmi2pt1.XMI] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.XMI] =
      phrase((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Documentation")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/UML/2.1"), "Model")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 =>
      umlxmi2pt1.XMI(scalaxb.fromXML[umlxmi2pt1.Documentation2](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Model2](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Extension](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.XMI, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{http://schema.omg.org/spec/XMI/2.1}version", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "version", __obj.xmiversion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.XMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[umlxmi2pt1.Documentation2](__obj.Documentation, Some("http://schema.omg.org/spec/XMI/2.1"), Some("Documentation"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Model2](__obj.Model, Some("http://schema.omg.org/spec/UML/2.1"), Some("Model"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Extension](__obj.Extension, Some("http://schema.omg.org/spec/XMI/2.1"), Some("Extension"), __scope, false))

  }

  trait DefaultUmlxmi2pt1_Documentation2Format extends scalaxb.XMLFormat[umlxmi2pt1.Documentation2] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Documentation2] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Documentation2] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Documentation2(scala.collection.immutable.ListMap(List(
        (node \ "@exporter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@exporter" -> _ },
        (node \ "@exporterID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@exporterID" -> _ },
        (node \ "@exporterVersion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@exporterVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Documentation2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@exporter", _) => attr = scala.xml.Attribute(null, "exporter", __obj.exporter.toString, attr)
        case ("@exporterID", _) => attr = scala.xml.Attribute(null, "exporterID", __obj.exporterID.toString, attr)
        case ("@exporterVersion", _) => attr = scala.xml.Attribute(null, "exporterVersion", __obj.exporterVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Documentation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ExtensionFormat extends scalaxb.XMLFormat[umlxmi2pt1.Extension] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Extension] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Extension] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Extension(scala.collection.immutable.ListMap(List(
        (node \ "@extender").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@extender" -> _ },
        (node \ "@extenderID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@extenderID" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Extension, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@extender", _) => attr = scala.xml.Attribute(null, "extender", __obj.extender.toString, attr)
        case ("@extenderID", _) => attr = scala.xml.Attribute(null, "extenderID", __obj.extenderID.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Extension, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ConnectorsFormat extends scalaxb.ElemNameParser[umlxmi2pt1.Connectors] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Connectors] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "connector")) ^^
      { case p1 =>
      umlxmi2pt1.Connectors(p1 map { scalaxb.fromXML[umlxmi2pt1.Connector](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: umlxmi2pt1.Connectors, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.connector flatMap { scalaxb.toXML[umlxmi2pt1.Connector](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("connector"), __scope, false) })

  }

  trait DefaultUmlxmi2pt1_ConnectorFormat extends scalaxb.XMLFormat[umlxmi2pt1.Connector] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Connector] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Connector] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Connector(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Connector, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Connector, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_PackagedElementFormat extends scalaxb.ElemNameParser[umlxmi2pt1.PackagedElement] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.PackagedElement] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "ownedComment")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.OwnedComment](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "packagedElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.PackagedElement](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "ownedLiteral")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.OwnedLiteral](x, scalaxb.ElemName(node) :: stack)))) ||| 
      (((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "memberEnd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.MemberEnd](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "ownedEnd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.OwnedEnd](x, scalaxb.ElemName(node) :: stack))))) ||| 
      (((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "generalization")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Generalization](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "ownedAttribute")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.OwnedAttribute](x, scalaxb.ElemName(node) :: stack)))))) ^^
      { case p1 ~ p2 =>
      umlxmi2pt1.PackagedElement(p1,
        p2,
        scala.collection.immutable.ListMap(List(
        (node \ "@client").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@client" -> _ },
        (node \ "@isAbstract").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isAbstract" -> _ },
        (node \ "@memberEnd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@memberEnd" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@supplier").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@supplier" -> _ },
        (node \ "@visibility").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@visibility" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.PackagedElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@client", _) => __obj.client foreach { x => attr = scala.xml.Attribute(null, "client", x.toString, attr) }
        case ("@isAbstract", _) => __obj.isAbstract foreach { x => attr = scala.xml.Attribute(null, "isAbstract", x.toString, attr) }
        case ("@memberEnd", _) => __obj.memberEnd foreach { x => attr = scala.xml.Attribute(null, "memberEnd", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@supplier", _) => __obj.supplier foreach { x => attr = scala.xml.Attribute(null, "supplier", x.toString, attr) }
        case ("@visibility", _) => __obj.visibility foreach { x => attr = scala.xml.Attribute(null, "visibility", x.toString, attr) }
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.PackagedElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.packagedelementoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[umlxmi2pt1.PackagedElementOption]](x, x.namespace, x.key, __scope, false) },
        __obj.packagedelementoption2 flatMap { x => scalaxb.toXML[scalaxb.DataRecord[umlxmi2pt1.PackagedElementOption2]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultUmlxmi2pt1_OwnedLiteralFormat extends scalaxb.XMLFormat[umlxmi2pt1.OwnedLiteral] with scalaxb.CanWriteChildNodes[umlxmi2pt1.OwnedLiteral] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.OwnedLiteral] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.OwnedLiteral(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@visibility").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@visibility" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.OwnedLiteral, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@visibility", _) => attr = scala.xml.Attribute(null, "visibility", __obj.visibility.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.OwnedLiteral, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_MemberEndFormat extends scalaxb.XMLFormat[umlxmi2pt1.MemberEnd] with scalaxb.CanWriteChildNodes[umlxmi2pt1.MemberEnd] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.MemberEnd] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.MemberEnd(scala.collection.immutable.ListMap(List(
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}idref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.MemberEnd, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@idref", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.MemberEnd, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_OwnedEndFormat extends scalaxb.ElemNameParser[umlxmi2pt1.OwnedEnd] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.OwnedEnd] =
      phrase(opt(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "type")) ~ 
      opt(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "lowerValue")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "upperValue"))) ^^ 
        { case p1 ~ p2 => umlxmi2pt1.OwnedEndSequence1(scalaxb.fromXML[umlxmi2pt1.LowerValue](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.UpperValue](p2, scalaxb.ElemName(node) :: stack)) }) ^^
      { case p1 ~ p2 =>
      umlxmi2pt1.OwnedEnd(p1.headOption map { scalaxb.fromXML[umlxmi2pt1.Type](_, scalaxb.ElemName(node) :: stack) },
        p2,
        scala.collection.immutable.ListMap(List(
        (node \ "@aggregation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@aggregation" -> _ },
        (node \ "@association").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@association" -> _ },
        (node \ "@isComposite").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isComposite" -> _ },
        (node \ "@isDerived").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isDerived" -> _ },
        (node \ "@isDerivedUnion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isDerivedUnion" -> _ },
        (node \ "@isOrdered").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isOrdered" -> _ },
        (node \ "@isReadOnly").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isReadOnly" -> _ },
        (node \ "@isStatic").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isStatic" -> _ },
        (node \ "@isUnique").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isUnique" -> _ },
        (node \ "@lower").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@lower" -> _ },
        (node \ "@memberEnd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@memberEnd" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@upper").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@upper" -> _ },
        (node \ "@visibility").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@visibility" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.OwnedEnd, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@aggregation", _) => __obj.aggregation foreach { x => attr = scala.xml.Attribute(null, "aggregation", x.toString, attr) }
        case ("@association", _) => __obj.association foreach { x => attr = scala.xml.Attribute(null, "association", x.toString, attr) }
        case ("@isComposite", _) => __obj.isComposite foreach { x => attr = scala.xml.Attribute(null, "isComposite", x.toString, attr) }
        case ("@isDerived", _) => __obj.isDerived foreach { x => attr = scala.xml.Attribute(null, "isDerived", x.toString, attr) }
        case ("@isDerivedUnion", _) => __obj.isDerivedUnion foreach { x => attr = scala.xml.Attribute(null, "isDerivedUnion", x.toString, attr) }
        case ("@isOrdered", _) => __obj.isOrdered foreach { x => attr = scala.xml.Attribute(null, "isOrdered", x.toString, attr) }
        case ("@isReadOnly", _) => __obj.isReadOnly foreach { x => attr = scala.xml.Attribute(null, "isReadOnly", x.toString, attr) }
        case ("@isStatic", _) => __obj.isStatic foreach { x => attr = scala.xml.Attribute(null, "isStatic", x.toString, attr) }
        case ("@isUnique", _) => __obj.isUnique foreach { x => attr = scala.xml.Attribute(null, "isUnique", x.toString, attr) }
        case ("@lower", _) => __obj.lower foreach { x => attr = scala.xml.Attribute(null, "lower", x.toString, attr) }
        case ("@memberEnd", _) => __obj.memberEnd foreach { x => attr = scala.xml.Attribute(null, "memberEnd", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case ("@upper", _) => __obj.upper foreach { x => attr = scala.xml.Attribute(null, "upper", x.toString, attr) }
        case ("@visibility", _) => __obj.visibility foreach { x => attr = scala.xml.Attribute(null, "visibility", x.toString, attr) }
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => __obj.xmitype foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.OwnedEnd, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.typeValue map { scalaxb.toXML[umlxmi2pt1.Type](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.ownedendsequence1 map { scalaxb.toXML[umlxmi2pt1.OwnedEndSequence1](_, None, Some("ownedendsequence1"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUmlxmi2pt1_OwnedEndSequence1Format extends scalaxb.XMLFormat[umlxmi2pt1.OwnedEndSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.OwnedEndSequence1] = Left("don't call me.")
    
    def writes(__obj: umlxmi2pt1.OwnedEndSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[umlxmi2pt1.LowerValue](__obj.lowerValue, Some("http://schema.omg.org/spec/XMI/2.1"), Some("lowerValue"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.UpperValue](__obj.upperValue, Some("http://schema.omg.org/spec/XMI/2.1"), Some("upperValue"), __scope, false))


  }

  trait DefaultUmlxmi2pt1_GeneralizationFormat extends scalaxb.XMLFormat[umlxmi2pt1.Generalization] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Generalization] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Generalization] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Generalization(scala.collection.immutable.ListMap(List(
        (node \ "@general").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@general" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Generalization, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@general", _) => attr = scala.xml.Attribute(null, "general", __obj.general.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Generalization, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_OwnedAttributeFormat extends scalaxb.ElemNameParser[umlxmi2pt1.OwnedAttribute] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.OwnedAttribute] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "lowerValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.LowerValue](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "type")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Type](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "upperValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.UpperValue](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "defaultValue")) ^^
      { case p1 ~ p2 =>
      umlxmi2pt1.OwnedAttribute(p1,
        p2.headOption map { scalaxb.fromXML[umlxmi2pt1.DefaultValue](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@aggregation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@aggregation" -> _ },
        (node \ "@association").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@association" -> _ },
        (node \ "@isDerived").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isDerived" -> _ },
        (node \ "@isDerivedUnion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isDerivedUnion" -> _ },
        (node \ "@isOrdered").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isOrdered" -> _ },
        (node \ "@isReadOnly").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isReadOnly" -> _ },
        (node \ "@isStatic").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isStatic" -> _ },
        (node \ "@isUnique").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isUnique" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@visibility").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@visibility" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.OwnedAttribute, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@aggregation", _) => __obj.aggregation foreach { x => attr = scala.xml.Attribute(null, "aggregation", x.toString, attr) }
        case ("@association", _) => __obj.association foreach { x => attr = scala.xml.Attribute(null, "association", x.toString, attr) }
        case ("@isDerived", _) => __obj.isDerived foreach { x => attr = scala.xml.Attribute(null, "isDerived", x.toString, attr) }
        case ("@isDerivedUnion", _) => __obj.isDerivedUnion foreach { x => attr = scala.xml.Attribute(null, "isDerivedUnion", x.toString, attr) }
        case ("@isOrdered", _) => __obj.isOrdered foreach { x => attr = scala.xml.Attribute(null, "isOrdered", x.toString, attr) }
        case ("@isReadOnly", _) => __obj.isReadOnly foreach { x => attr = scala.xml.Attribute(null, "isReadOnly", x.toString, attr) }
        case ("@isStatic", _) => __obj.isStatic foreach { x => attr = scala.xml.Attribute(null, "isStatic", x.toString, attr) }
        case ("@isUnique", _) => __obj.isUnique foreach { x => attr = scala.xml.Attribute(null, "isUnique", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@visibility", _) => __obj.visibility foreach { x => attr = scala.xml.Attribute(null, "visibility", x.toString, attr) }
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.OwnedAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ownedattributeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[umlxmi2pt1.OwnedAttributeOption]](x, x.namespace, x.key, __scope, false) },
        __obj.defaultValue map { scalaxb.toXML[umlxmi2pt1.DefaultValue](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("defaultValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUmlxmi2pt1_DefaultValueFormat extends scalaxb.XMLFormat[umlxmi2pt1.DefaultValue] with scalaxb.CanWriteChildNodes[umlxmi2pt1.DefaultValue] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.DefaultValue] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.DefaultValue(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.DefaultValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.DefaultValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ElementsFormat extends scalaxb.ElemNameParser[umlxmi2pt1.Elements] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Elements] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "element")) ^^
      { case p1 =>
      umlxmi2pt1.Elements(p1 map { scalaxb.fromXML[umlxmi2pt1.Element](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: umlxmi2pt1.Elements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.element flatMap { scalaxb.toXML[umlxmi2pt1.Element](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("element"), __scope, false) })

  }

  trait DefaultUmlxmi2pt1_ElementFormat extends scalaxb.ElemNameParser[umlxmi2pt1.Element] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Element] =
      phrase(opt(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "model")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "properties")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "project")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "code")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "style"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 => umlxmi2pt1.ElementSequence1(scalaxb.fromXML[umlxmi2pt1.Model](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Properties](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Project](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Code](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Style](p5, scalaxb.ElemName(node) :: stack)) }) ~ 
      opt(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "modelDocument")) ~ 
      opt(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "tags")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "xrefs")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "extendedProperties"))) ^^ 
        { case p1 ~ p2 ~ p3 => umlxmi2pt1.ElementSequence2(scalaxb.fromXML[umlxmi2pt1.Tags](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Xrefs](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.ExtendedProperties](p3, scalaxb.ElemName(node) :: stack)) }) ~ 
      opt(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "packageproperties")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "paths")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "times")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "flags"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => umlxmi2pt1.ElementSequence3(scalaxb.fromXML[umlxmi2pt1.Packageproperties](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Paths](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Times](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Flags](p4, scalaxb.ElemName(node) :: stack)) }) ~ 
      opt(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "attributes")) ~ 
      opt(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "links")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      umlxmi2pt1.Element(p1,
        p2.headOption map { scalaxb.fromXML[umlxmi2pt1.ModelDocument](_, scalaxb.ElemName(node) :: stack) },
        p3,
        p4,
        p5.headOption map { scalaxb.fromXML[umlxmi2pt1.AttributesType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[umlxmi2pt1.Links](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@geometry").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@geometry" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@scope").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@scope" -> _ },
        (node \ "@seqno").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@seqno" -> _ },
        (node \ "@style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@style" -> _ },
        (node \ "@subject").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@subject" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}idref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idref" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.Element, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@geometry", _) => __obj.geometry foreach { x => attr = scala.xml.Attribute(null, "geometry", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@scope", _) => __obj.scope foreach { x => attr = scala.xml.Attribute(null, "scope", x.toString, attr) }
        case ("@seqno", _) => __obj.seqno foreach { x => attr = scala.xml.Attribute(null, "seqno", x.toString, attr) }
        case ("@style", _) => __obj.style foreach { x => attr = scala.xml.Attribute(null, "style", x.toString, attr) }
        case ("@subject", _) => __obj.subject foreach { x => attr = scala.xml.Attribute(null, "subject", x.toString, attr) }
        case ("@idref", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => __obj.xmitype foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Element, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.elementsequence1 map { scalaxb.toXML[umlxmi2pt1.ElementSequence1](_, None, Some("elementsequence1"), __scope, false) } getOrElse {Nil},
        __obj.modelDocument map { scalaxb.toXML[umlxmi2pt1.ModelDocument](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("modelDocument"), __scope, false) } getOrElse {Nil},
        __obj.elementsequence2 map { scalaxb.toXML[umlxmi2pt1.ElementSequence2](_, None, Some("elementsequence2"), __scope, false) } getOrElse {Nil},
        __obj.elementsequence3 map { scalaxb.toXML[umlxmi2pt1.ElementSequence3](_, None, Some("elementsequence3"), __scope, false) } getOrElse {Nil},
        __obj.attributes map { scalaxb.toXML[umlxmi2pt1.AttributesType](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("attributes"), __scope, false) } getOrElse {Nil},
        __obj.links map { scalaxb.toXML[umlxmi2pt1.Links](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("links"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUmlxmi2pt1_ElementSequence2Format extends scalaxb.XMLFormat[umlxmi2pt1.ElementSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.ElementSequence2] = Left("don't call me.")
    
    def writes(__obj: umlxmi2pt1.ElementSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[umlxmi2pt1.Tags](__obj.tags, Some("http://schema.omg.org/spec/XMI/2.1"), Some("tags"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Xrefs](__obj.xrefs, Some("http://schema.omg.org/spec/XMI/2.1"), Some("xrefs"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.ExtendedProperties](__obj.extendedProperties, Some("http://schema.omg.org/spec/XMI/2.1"), Some("extendedProperties"), __scope, false))


  }

  trait DefaultUmlxmi2pt1_ElementSequence3Format extends scalaxb.XMLFormat[umlxmi2pt1.ElementSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.ElementSequence3] = Left("don't call me.")
    
    def writes(__obj: umlxmi2pt1.ElementSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[umlxmi2pt1.Packageproperties](__obj.packageproperties, Some("http://schema.omg.org/spec/XMI/2.1"), Some("packageproperties"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Paths](__obj.paths, Some("http://schema.omg.org/spec/XMI/2.1"), Some("paths"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Times](__obj.times, Some("http://schema.omg.org/spec/XMI/2.1"), Some("times"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Flags](__obj.flags, Some("http://schema.omg.org/spec/XMI/2.1"), Some("flags"), __scope, false))


  }

  trait DefaultUmlxmi2pt1_ElementSequence1Format extends scalaxb.XMLFormat[umlxmi2pt1.ElementSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.ElementSequence1] = Left("don't call me.")
    
    def writes(__obj: umlxmi2pt1.ElementSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[umlxmi2pt1.Model](__obj.model, Some("http://schema.omg.org/spec/XMI/2.1"), Some("model"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Properties](__obj.properties, Some("http://schema.omg.org/spec/XMI/2.1"), Some("properties"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Project](__obj.project, Some("http://schema.omg.org/spec/XMI/2.1"), Some("project"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Code](__obj.code, Some("http://schema.omg.org/spec/XMI/2.1"), Some("code"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Style](__obj.style, Some("http://schema.omg.org/spec/XMI/2.1"), Some("style"), __scope, false))


  }

  trait DefaultUmlxmi2pt1_CodeFormat extends scalaxb.XMLFormat[umlxmi2pt1.Code] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Code] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Code] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Code(scala.collection.immutable.ListMap(List(
        (node \ "@gentype").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@gentype" -> _ },
        (node \ "@product_name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@product_name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Code, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@gentype", _) => __obj.gentype foreach { x => attr = scala.xml.Attribute(null, "gentype", x.toString, attr) }
        case ("@product_name", _) => __obj.product_name foreach { x => attr = scala.xml.Attribute(null, "product_name", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Code, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ModelDocumentFormat extends scalaxb.XMLFormat[umlxmi2pt1.ModelDocument] with scalaxb.CanWriteChildNodes[umlxmi2pt1.ModelDocument] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.ModelDocument] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.ModelDocument(scala.collection.immutable.ListMap(List(
        (node \ "@author").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@author" -> _ },
        (node \ "@date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@date" -> _ },
        (node \ "@docid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@docid" -> _ },
        (node \ "@elementtype").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@elementtype" -> _ },
        (node \ "@isactive").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@isactive" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@notes").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@notes" -> _ },
        (node \ "@sequence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@sequence" -> _ },
        (node \ "@strcontent").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@strcontent" -> _ },
        (node \ "@style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@style" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.ModelDocument, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@author", _) => attr = scala.xml.Attribute(null, "author", __obj.author.toString, attr)
        case ("@date", _) => attr = scala.xml.Attribute(null, "date", __obj.date.toString, attr)
        case ("@docid", _) => attr = scala.xml.Attribute(null, "docid", __obj.docid.toString, attr)
        case ("@elementtype", _) => attr = scala.xml.Attribute(null, "elementtype", __obj.elementtype.toString, attr)
        case ("@isactive", _) => attr = scala.xml.Attribute(null, "isactive", __obj.isactive.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@notes", _) => attr = scala.xml.Attribute(null, "notes", __obj.notes.toString, attr)
        case ("@sequence", _) => attr = scala.xml.Attribute(null, "sequence", __obj.sequence.toString, attr)
        case ("@strcontent", _) => attr = scala.xml.Attribute(null, "strcontent", __obj.strcontent.toString, attr)
        case ("@style", _) => attr = scala.xml.Attribute(null, "style", __obj.style.toString, attr)
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.ModelDocument, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_PackagepropertiesFormat extends scalaxb.XMLFormat[umlxmi2pt1.Packageproperties] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Packageproperties] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Packageproperties] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Packageproperties(scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Packageproperties, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Packageproperties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_PathsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Paths] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Paths] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Paths] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Paths())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: umlxmi2pt1.Paths, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_TimesFormat extends scalaxb.XMLFormat[umlxmi2pt1.Times] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Times] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Times] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Times(scala.collection.immutable.ListMap(List(
        (node \ "@created").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@created" -> _ },
        (node \ "@lastloaddate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lastloaddate" -> _ },
        (node \ "@lastsavedate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lastsavedate" -> _ },
        (node \ "@modified").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@modified" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Times, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@created", _) => attr = scala.xml.Attribute(null, "created", __obj.created.toString, attr)
        case ("@lastloaddate", _) => __obj.lastloaddate foreach { x => attr = scala.xml.Attribute(null, "lastloaddate", x.toString, attr) }
        case ("@lastsavedate", _) => __obj.lastsavedate foreach { x => attr = scala.xml.Attribute(null, "lastsavedate", x.toString, attr) }
        case ("@modified", _) => attr = scala.xml.Attribute(null, "modified", __obj.modified.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Times, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_FlagsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Flags] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Flags] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Flags] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Flags(scala.collection.immutable.ListMap(List(
        (node \ "@batchload").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@batchload" -> _ },
        (node \ "@batchsave").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@batchsave" -> _ },
        (node \ "@iscontrolled").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@iscontrolled" -> _ },
        (node \ "@isnamespace").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@isnamespace" -> _ },
        (node \ "@isprotected").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isprotected" -> _ },
        (node \ "@logxml").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@logxml" -> _ },
        (node \ "@packageFlags").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@packageFlags" -> _ },
        (node \ "@usedtd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@usedtd" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Flags, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@batchload", _) => __obj.batchload foreach { x => attr = scala.xml.Attribute(null, "batchload", x.toString, attr) }
        case ("@batchsave", _) => __obj.batchsave foreach { x => attr = scala.xml.Attribute(null, "batchsave", x.toString, attr) }
        case ("@iscontrolled", _) => attr = scala.xml.Attribute(null, "iscontrolled", __obj.iscontrolled.toString, attr)
        case ("@isnamespace", _) => __obj.isnamespace foreach { x => attr = scala.xml.Attribute(null, "isnamespace", x.toString, attr) }
        case ("@isprotected", _) => attr = scala.xml.Attribute(null, "isprotected", __obj.isprotected.toString, attr)
        case ("@logxml", _) => attr = scala.xml.Attribute(null, "logxml", __obj.logxml.toString, attr)
        case ("@packageFlags", _) => __obj.packageFlags foreach { x => attr = scala.xml.Attribute(null, "packageFlags", x.toString, attr) }
        case ("@usedtd", _) => attr = scala.xml.Attribute(null, "usedtd", __obj.usedtd.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Flags, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_AttributesTypeFormat extends scalaxb.ElemNameParser[umlxmi2pt1.AttributesType] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.AttributesType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "attribute")) ^^
      { case p1 =>
      umlxmi2pt1.AttributesType(p1 map { scalaxb.fromXML[umlxmi2pt1.Attribute](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: umlxmi2pt1.AttributesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.attribute flatMap { scalaxb.toXML[umlxmi2pt1.Attribute](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("attribute"), __scope, false) })

  }

  trait DefaultUmlxmi2pt1_AttributeFormat extends scalaxb.ElemNameParser[umlxmi2pt1.Attribute] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Attribute] =
      phrase((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "initial")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "documentation")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "model")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "properties")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "coords")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "containment")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "stereotype")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "bounds")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "options")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "style")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "styleex")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "tags")) ~ 
      (scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "xrefs")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      umlxmi2pt1.Attribute(scalaxb.fromXML[umlxmi2pt1.Initial](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Documentation](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Model](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Properties](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Coords](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Containment](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Stereotype](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Bounds](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Options](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Style](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Styleex](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Tags](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[umlxmi2pt1.Xrefs](p13, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@scope").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@scope" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}idref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.Attribute, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@scope", _) => attr = scala.xml.Attribute(null, "scope", __obj.scope.toString, attr)
        case ("@idref", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Attribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[umlxmi2pt1.Initial](__obj.initial, Some("http://schema.omg.org/spec/XMI/2.1"), Some("initial"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Documentation](__obj.documentation, Some("http://schema.omg.org/spec/XMI/2.1"), Some("documentation"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Model](__obj.model, Some("http://schema.omg.org/spec/XMI/2.1"), Some("model"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Properties](__obj.properties, Some("http://schema.omg.org/spec/XMI/2.1"), Some("properties"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Coords](__obj.coords, Some("http://schema.omg.org/spec/XMI/2.1"), Some("coords"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Containment](__obj.containment, Some("http://schema.omg.org/spec/XMI/2.1"), Some("containment"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Stereotype](__obj.stereotype, Some("http://schema.omg.org/spec/XMI/2.1"), Some("stereotype"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Bounds](__obj.bounds, Some("http://schema.omg.org/spec/XMI/2.1"), Some("bounds"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Options](__obj.options, Some("http://schema.omg.org/spec/XMI/2.1"), Some("options"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Style](__obj.style, Some("http://schema.omg.org/spec/XMI/2.1"), Some("style"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Styleex](__obj.styleex, Some("http://schema.omg.org/spec/XMI/2.1"), Some("styleex"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Tags](__obj.tags, Some("http://schema.omg.org/spec/XMI/2.1"), Some("tags"), __scope, false),
        scalaxb.toXML[umlxmi2pt1.Xrefs](__obj.xrefs, Some("http://schema.omg.org/spec/XMI/2.1"), Some("xrefs"), __scope, false))

  }

  trait DefaultUmlxmi2pt1_InitialFormat extends scalaxb.XMLFormat[umlxmi2pt1.Initial] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Initial] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Initial] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Initial(scala.collection.immutable.ListMap(List(
        (node \ "@body").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@body" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Initial, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@body", _) => __obj.body foreach { x => attr = scala.xml.Attribute(null, "body", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Initial, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_CoordsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Coords] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Coords] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Coords] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Coords(scala.collection.immutable.ListMap(List(
        (node \ "@ordered").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@ordered" -> _ },
        (node \ "@scale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@scale" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Coords, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ordered", _) => attr = scala.xml.Attribute(null, "ordered", __obj.ordered.toString, attr)
        case ("@scale", _) => attr = scala.xml.Attribute(null, "scale", __obj.scale.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Coords, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ContainmentFormat extends scalaxb.XMLFormat[umlxmi2pt1.Containment] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Containment] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Containment] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Containment(scala.collection.immutable.ListMap(List(
        (node \ "@containment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@containment" -> _ },
        (node \ "@position").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@position" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Containment, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@containment", _) => __obj.containment foreach { x => attr = scala.xml.Attribute(null, "containment", x.toString, attr) }
        case ("@position", _) => attr = scala.xml.Attribute(null, "position", __obj.position.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Containment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_StereotypeFormat extends scalaxb.XMLFormat[umlxmi2pt1.Stereotype] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Stereotype] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Stereotype] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Stereotype(scala.collection.immutable.ListMap(List(
        (node \ "@stereotype").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@stereotype" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Stereotype, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@stereotype", _) => __obj.stereotype foreach { x => attr = scala.xml.Attribute(null, "stereotype", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Stereotype, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_BoundsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Bounds] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Bounds] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Bounds] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Bounds(scala.collection.immutable.ListMap(List(
        (node \ "@lower").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@lower" -> _ },
        (node \ "@upper").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@upper" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Bounds, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lower", _) => attr = scala.xml.Attribute(null, "lower", __obj.lower.toString, attr)
        case ("@upper", _) => attr = scala.xml.Attribute(null, "upper", __obj.upper.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Bounds, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_OptionsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Options] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Options] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Options] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Options())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: umlxmi2pt1.Options, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_StyleexFormat extends scalaxb.XMLFormat[umlxmi2pt1.Styleex] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Styleex] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Styleex] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Styleex(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Styleex, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Styleex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_LinksFormat extends scalaxb.ElemNameParser[umlxmi2pt1.Links] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Links] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Abstraction")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Abstraction](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Aggregation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Aggregation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Association")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Association](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Dependency")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Dependency](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "Generalization")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.Generalization2](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "NoteLink")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.NoteLink](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      umlxmi2pt1.Links(p1) })
    
    def writesChildNodes(__obj: umlxmi2pt1.Links, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.linksoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[umlxmi2pt1.LinksOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultUmlxmi2pt1_AbstractionFormat extends scalaxb.XMLFormat[umlxmi2pt1.Abstraction] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Abstraction] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Abstraction] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Abstraction(scala.collection.immutable.ListMap(List(
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@start").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@start" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Abstraction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@end", _) => attr = scala.xml.Attribute(null, "end", __obj.end.toString, attr)
        case ("@start", _) => attr = scala.xml.Attribute(null, "start", __obj.start.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Abstraction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_AggregationFormat extends scalaxb.XMLFormat[umlxmi2pt1.Aggregation] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Aggregation] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Aggregation] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Aggregation(scala.collection.immutable.ListMap(List(
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@start").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@start" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Aggregation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@end", _) => attr = scala.xml.Attribute(null, "end", __obj.end.toString, attr)
        case ("@start", _) => attr = scala.xml.Attribute(null, "start", __obj.start.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Aggregation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_AssociationFormat extends scalaxb.XMLFormat[umlxmi2pt1.Association] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Association] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Association] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Association(scala.collection.immutable.ListMap(List(
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@start").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@start" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Association, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@end", _) => attr = scala.xml.Attribute(null, "end", __obj.end.toString, attr)
        case ("@start", _) => attr = scala.xml.Attribute(null, "start", __obj.start.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Association, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_DependencyFormat extends scalaxb.XMLFormat[umlxmi2pt1.Dependency] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Dependency] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Dependency] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Dependency(scala.collection.immutable.ListMap(List(
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@start").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@start" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Dependency, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@end", _) => attr = scala.xml.Attribute(null, "end", __obj.end.toString, attr)
        case ("@start", _) => attr = scala.xml.Attribute(null, "start", __obj.start.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Dependency, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_Generalization2Format extends scalaxb.XMLFormat[umlxmi2pt1.Generalization2] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Generalization2] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Generalization2] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Generalization2(scala.collection.immutable.ListMap(List(
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@start").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@start" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Generalization2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@end", _) => attr = scala.xml.Attribute(null, "end", __obj.end.toString, attr)
        case ("@start", _) => attr = scala.xml.Attribute(null, "start", __obj.start.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Generalization2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_NoteLinkFormat extends scalaxb.XMLFormat[umlxmi2pt1.NoteLink] with scalaxb.CanWriteChildNodes[umlxmi2pt1.NoteLink] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.NoteLink] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.NoteLink(scala.collection.immutable.ListMap(List(
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@start").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@start" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.NoteLink, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@end", _) => attr = scala.xml.Attribute(null, "end", __obj.end.toString, attr)
        case ("@start", _) => attr = scala.xml.Attribute(null, "start", __obj.start.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.NoteLink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ModelFormat extends scalaxb.XMLFormat[umlxmi2pt1.Model] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Model] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Model] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Model(scala.collection.immutable.ListMap(List(
        (node \ "@ea_eleType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ea_eleType" -> _ },
        (node \ "@ea_guid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ea_guid" -> _ },
        (node \ "@ea_localid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@ea_localid" -> _ },
        (node \ "@localID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@localID" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@owner").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@owner" -> _ },
        (node \ "@package").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@package" -> _ },
        (node \ "@package2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@package2" -> _ },
        (node \ "@tpos").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@tpos" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Model, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ea_eleType", _) => __obj.ea_eleType foreach { x => attr = scala.xml.Attribute(null, "ea_eleType", x.toString, attr) }
        case ("@ea_guid", _) => __obj.ea_guid foreach { x => attr = scala.xml.Attribute(null, "ea_guid", x.toString, attr) }
        case ("@ea_localid", _) => __obj.ea_localid foreach { x => attr = scala.xml.Attribute(null, "ea_localid", x.toString, attr) }
        case ("@localID", _) => __obj.localID foreach { x => attr = scala.xml.Attribute(null, "localID", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@owner", _) => __obj.owner foreach { x => attr = scala.xml.Attribute(null, "owner", x.toString, attr) }
        case ("@package", _) => __obj.packageValue foreach { x => attr = scala.xml.Attribute(null, "package", x.toString, attr) }
        case ("@package2", _) => __obj.package2 foreach { x => attr = scala.xml.Attribute(null, "package2", x.toString, attr) }
        case ("@tpos", _) => __obj.tpos foreach { x => attr = scala.xml.Attribute(null, "tpos", x.toString, attr) }
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Model, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_RoleFormat extends scalaxb.XMLFormat[umlxmi2pt1.Role] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Role] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Role] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Role(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@targetScope").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@targetScope" -> _ },
        (node \ "@visibility").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@visibility" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Role, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@targetScope", _) => __obj.targetScope foreach { x => attr = scala.xml.Attribute(null, "targetScope", x.toString, attr) }
        case ("@visibility", _) => attr = scala.xml.Attribute(null, "visibility", __obj.visibility.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Role, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_TypeFormat extends scalaxb.XMLFormat[umlxmi2pt1.Type] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Type] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Type] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Type(scala.collection.immutable.ListMap(List(
        (node \ "@aggregation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@aggregation" -> _ },
        (node \ "@containment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@containment" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@multiplicity").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@multiplicity" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}idref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Type, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@aggregation", _) => __obj.aggregation foreach { x => attr = scala.xml.Attribute(null, "aggregation", x.toString, attr) }
        case ("@containment", _) => __obj.containment foreach { x => attr = scala.xml.Attribute(null, "containment", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@multiplicity", _) => __obj.multiplicity foreach { x => attr = scala.xml.Attribute(null, "multiplicity", x.toString, attr) }
        case ("@idref", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Type, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ConstraintsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Constraints] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Constraints] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Constraints] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Constraints())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: umlxmi2pt1.Constraints, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ModifiersFormat extends scalaxb.XMLFormat[umlxmi2pt1.Modifiers] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Modifiers] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Modifiers] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Modifiers(scala.collection.immutable.ListMap(List(
        (node \ "@changeable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@changeable" -> _ },
        (node \ "@isLeaf").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isLeaf" -> _ },
        (node \ "@isNavigable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isNavigable" -> _ },
        (node \ "@isOrdered").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isOrdered" -> _ },
        (node \ "@isRoot").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isRoot" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Modifiers, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@changeable", _) => __obj.changeable foreach { x => attr = scala.xml.Attribute(null, "changeable", x.toString, attr) }
        case ("@isLeaf", _) => __obj.isLeaf foreach { x => attr = scala.xml.Attribute(null, "isLeaf", x.toString, attr) }
        case ("@isNavigable", _) => __obj.isNavigable foreach { x => attr = scala.xml.Attribute(null, "isNavigable", x.toString, attr) }
        case ("@isOrdered", _) => __obj.isOrdered foreach { x => attr = scala.xml.Attribute(null, "isOrdered", x.toString, attr) }
        case ("@isRoot", _) => __obj.isRoot foreach { x => attr = scala.xml.Attribute(null, "isRoot", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Modifiers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_StyleFormat extends scalaxb.XMLFormat[umlxmi2pt1.Style] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Style] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Style] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Style(scala.collection.immutable.ListMap(List(
        (node \ "@appearance").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@appearance" -> _ },
        (node \ "@object_style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@object_style" -> _ },
        (node \ "@styleex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@styleex" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Style, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@appearance", _) => __obj.appearance foreach { x => attr = scala.xml.Attribute(null, "appearance", x.toString, attr) }
        case ("@object_style", _) => __obj.object_style foreach { x => attr = scala.xml.Attribute(null, "object_style", x.toString, attr) }
        case ("@styleex", _) => __obj.styleex foreach { x => attr = scala.xml.Attribute(null, "styleex", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Style, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_DocumentationFormat extends scalaxb.XMLFormat[umlxmi2pt1.Documentation] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Documentation] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Documentation] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Documentation(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Documentation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Documentation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_XrefsFormat extends scalaxb.XMLFormat[umlxmi2pt1.Xrefs] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Xrefs] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Xrefs] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Xrefs(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Xrefs, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Xrefs, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_TagsFormat extends scalaxb.ElemNameParser[umlxmi2pt1.Tags] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Tags] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "tag")) ^^
      { case p1 =>
      umlxmi2pt1.Tags(p1 map { scalaxb.fromXML[umlxmi2pt1.Tag](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: umlxmi2pt1.Tags, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.tag flatMap { scalaxb.toXML[umlxmi2pt1.Tag](_, Some("http://schema.omg.org/spec/XMI/2.1"), Some("tag"), __scope, false) })

  }

  trait DefaultUmlxmi2pt1_TagFormat extends scalaxb.XMLFormat[umlxmi2pt1.Tag] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Tag] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Tag] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Tag(scala.collection.immutable.ListMap(List(
        (node \ "@modelElement").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@modelElement" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@notes").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@notes" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Tag, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@modelElement", _) => __obj.modelElement foreach { x => attr = scala.xml.Attribute(null, "modelElement", x.toString, attr) }
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@notes", _) => __obj.notes foreach { x => attr = scala.xml.Attribute(null, "notes", x.toString, attr) }
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Tag, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_PropertiesFormat extends scalaxb.XMLFormat[umlxmi2pt1.Properties] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Properties] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Properties] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Properties(scala.collection.immutable.ListMap(List(
        (node \ "@alias").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@alias" -> _ },
        (node \ "@changeability").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@changeability" -> _ },
        (node \ "@collection").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@collection" -> _ },
        (node \ "@derived").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@derived" -> _ },
        (node \ "@direction").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@direction" -> _ },
        (node \ "@documentation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@documentation" -> _ },
        (node \ "@duplicates").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@duplicates" -> _ },
        (node \ "@ea_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ea_type" -> _ },
        (node \ "@isAbstract").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isAbstract" -> _ },
        (node \ "@isActive").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isActive" -> _ },
        (node \ "@isLeaf").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isLeaf" -> _ },
        (node \ "@isRoot").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isRoot" -> _ },
        (node \ "@isSpecification").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@isSpecification" -> _ },
        (node \ "@length").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@length" -> _ },
        (node \ "@nType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@nType" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@precision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@precision" -> _ },
        (node \ "@sType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@sType" -> _ },
        (node \ "@scope").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@scope" -> _ },
        (node \ "@static").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@static" -> _ },
        (node \ "@stereotype").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@stereotype" -> _ },
        (node \ "@subtype").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@subtype" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Properties, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@alias", _) => __obj.alias foreach { x => attr = scala.xml.Attribute(null, "alias", x.toString, attr) }
        case ("@changeability", _) => __obj.changeability foreach { x => attr = scala.xml.Attribute(null, "changeability", x.toString, attr) }
        case ("@collection", _) => __obj.collection foreach { x => attr = scala.xml.Attribute(null, "collection", x.toString, attr) }
        case ("@derived", _) => __obj.derived foreach { x => attr = scala.xml.Attribute(null, "derived", x.toString, attr) }
        case ("@direction", _) => __obj.direction foreach { x => attr = scala.xml.Attribute(null, "direction", x.toString, attr) }
        case ("@documentation", _) => __obj.documentation foreach { x => attr = scala.xml.Attribute(null, "documentation", x.toString, attr) }
        case ("@duplicates", _) => __obj.duplicates foreach { x => attr = scala.xml.Attribute(null, "duplicates", x.toString, attr) }
        case ("@ea_type", _) => __obj.ea_type foreach { x => attr = scala.xml.Attribute(null, "ea_type", x.toString, attr) }
        case ("@isAbstract", _) => __obj.isAbstract foreach { x => attr = scala.xml.Attribute(null, "isAbstract", x.toString, attr) }
        case ("@isActive", _) => __obj.isActive foreach { x => attr = scala.xml.Attribute(null, "isActive", x.toString, attr) }
        case ("@isLeaf", _) => __obj.isLeaf foreach { x => attr = scala.xml.Attribute(null, "isLeaf", x.toString, attr) }
        case ("@isRoot", _) => __obj.isRoot foreach { x => attr = scala.xml.Attribute(null, "isRoot", x.toString, attr) }
        case ("@isSpecification", _) => __obj.isSpecification foreach { x => attr = scala.xml.Attribute(null, "isSpecification", x.toString, attr) }
        case ("@length", _) => __obj.length foreach { x => attr = scala.xml.Attribute(null, "length", x.toString, attr) }
        case ("@nType", _) => __obj.nType foreach { x => attr = scala.xml.Attribute(null, "nType", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@precision", _) => __obj.precision foreach { x => attr = scala.xml.Attribute(null, "precision", x.toString, attr) }
        case ("@sType", _) => __obj.sType foreach { x => attr = scala.xml.Attribute(null, "sType", x.toString, attr) }
        case ("@scope", _) => __obj.scope foreach { x => attr = scala.xml.Attribute(null, "scope", x.toString, attr) }
        case ("@static", _) => __obj.static foreach { x => attr = scala.xml.Attribute(null, "static", x.toString, attr) }
        case ("@stereotype", _) => __obj.stereotype foreach { x => attr = scala.xml.Attribute(null, "stereotype", x.toString, attr) }
        case ("@subtype", _) => __obj.subtype foreach { x => attr = scala.xml.Attribute(null, "subtype", x.toString, attr) }
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Properties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ExtendedPropertiesFormat extends scalaxb.XMLFormat[umlxmi2pt1.ExtendedProperties] with scalaxb.CanWriteChildNodes[umlxmi2pt1.ExtendedProperties] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.ExtendedProperties] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.ExtendedProperties(scala.collection.immutable.ListMap(List(
        (node \ "@conditional").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@conditional" -> _ },
        (node \ "@package_name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@package_name" -> _ },
        (node \ "@tagged").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@tagged" -> _ },
        (node \ "@virtualInheritance").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@virtualInheritance" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.ExtendedProperties, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@conditional", _) => __obj.conditional foreach { x => attr = scala.xml.Attribute(null, "conditional", x.toString, attr) }
        case ("@package_name", _) => __obj.package_name foreach { x => attr = scala.xml.Attribute(null, "package_name", x.toString, attr) }
        case ("@tagged", _) => __obj.tagged foreach { x => attr = scala.xml.Attribute(null, "tagged", x.toString, attr) }
        case ("@virtualInheritance", _) => __obj.virtualInheritance foreach { x => attr = scala.xml.Attribute(null, "virtualInheritance", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.ExtendedProperties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_OwnedCommentFormat extends scalaxb.ElemNameParser[umlxmi2pt1.OwnedComment] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.OwnedComment] =
      phrase(opt(((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "annotatedElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[umlxmi2pt1.AnnotatedElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "body")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      umlxmi2pt1.OwnedComment(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@annotatedElement").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@annotatedElement" -> _ },
        (node \ "@body").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@body" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.OwnedComment, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@annotatedElement", _) => __obj.annotatedElement foreach { x => attr = scala.xml.Attribute(null, "annotatedElement", x.toString, attr) }
        case ("@body", _) => __obj.body foreach { x => attr = scala.xml.Attribute(null, "body", x.toString, attr) }
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.OwnedComment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ownedcommentoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil})

  }

  trait DefaultUmlxmi2pt1_AnnotatedElementFormat extends scalaxb.XMLFormat[umlxmi2pt1.AnnotatedElement] with scalaxb.CanWriteChildNodes[umlxmi2pt1.AnnotatedElement] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.AnnotatedElement] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.AnnotatedElement(scala.collection.immutable.ListMap(List(
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}idref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.AnnotatedElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@idref", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.AnnotatedElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_ProjectFormat extends scalaxb.XMLFormat[umlxmi2pt1.Project] with scalaxb.CanWriteChildNodes[umlxmi2pt1.Project] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Project] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Project(scala.collection.immutable.ListMap(List(
        (node \ "@author").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@author" -> _ },
        (node \ "@complexity").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@complexity" -> _ },
        (node \ "@created").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@created" -> _ },
        (node \ "@modified").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@modified" -> _ },
        (node \ "@phase").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@phase" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@status" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.Project, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@author", _) => __obj.author foreach { x => attr = scala.xml.Attribute(null, "author", x.toString, attr) }
        case ("@complexity", _) => __obj.complexity foreach { x => attr = scala.xml.Attribute(null, "complexity", x.toString, attr) }
        case ("@created", _) => attr = scala.xml.Attribute(null, "created", __obj.created.toString, attr)
        case ("@modified", _) => attr = scala.xml.Attribute(null, "modified", __obj.modified.toString, attr)
        case ("@phase", _) => __obj.phase foreach { x => attr = scala.xml.Attribute(null, "phase", x.toString, attr) }
        case ("@status", _) => __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
        case ("@version", _) => __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Project, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_LowerValueFormat extends scalaxb.XMLFormat[umlxmi2pt1.LowerValue] with scalaxb.CanWriteChildNodes[umlxmi2pt1.LowerValue] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.LowerValue] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.LowerValue(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.LowerValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.LowerValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_UpperValueFormat extends scalaxb.XMLFormat[umlxmi2pt1.UpperValue] with scalaxb.CanWriteChildNodes[umlxmi2pt1.UpperValue] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.UpperValue] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.UpperValue(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: umlxmi2pt1.UpperValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.UpperValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUmlxmi2pt1_Idref1Format extends scalaxb.AttributeGroupFormat[umlxmi2pt1.Idref1] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Idref1] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Idref1(scalaxb.fromXML[String]((node \ "@{http://schema.omg.org/spec/XMI/2.1}idref"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: umlxmi2pt1.Idref1, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
      attr
    }
  }

  trait DefaultUmlxmi2pt1_IdFormat extends scalaxb.AttributeGroupFormat[umlxmi2pt1.Id] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Id] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Id(scalaxb.fromXML[String]((node \ "@{http://schema.omg.org/spec/XMI/2.1}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: umlxmi2pt1.Id, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
      attr
    }
  }

  trait DefaultUmlxmi2pt1_IdrefFormat extends scalaxb.AttributeGroupFormat[umlxmi2pt1.Idref] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Idref] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Idref(scalaxb.fromXML[String]((node \ "@{http://schema.omg.org/spec/XMI/2.1}idref"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: umlxmi2pt1.Idref, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "idref", __obj.idref.toString, attr)
      attr
    }
  }

  trait DefaultUmlxmi2pt1_Id2Format extends scalaxb.AttributeGroupFormat[umlxmi2pt1.Id2] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Id2] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Id2(scalaxb.fromXML[String]((node \ "@{http://schema.omg.org/spec/XMI/2.1}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: umlxmi2pt1.Id2, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
      attr
    }
  }

  trait DefaultUmlxmi2pt1_Id1Format extends scalaxb.AttributeGroupFormat[umlxmi2pt1.Id1] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/XMI/2.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, umlxmi2pt1.Id1] = seq match {
      case node: scala.xml.Node => Right(umlxmi2pt1.Id1(scalaxb.fromXML[String]((node \ "@{http://schema.omg.org/spec/XMI/2.1}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: umlxmi2pt1.Id1, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "id", __obj.id.toString, attr)
      attr
    }
  }

  trait DefaultUmlxmi2pt1_Model2Format extends scalaxb.ElemNameParser[umlxmi2pt1.Model2] {
    val targetNamespace: Option[String] = Some("http://schema.omg.org/spec/UML/2.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[umlxmi2pt1.Model2] =
      phrase((scalaxb.ElemName(Some("http://schema.omg.org/spec/XMI/2.1"), "packagedElement")) ^^
      { case p1 =>
      umlxmi2pt1.Model2(scalaxb.fromXML[umlxmi2pt1.PackagedElement](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@visibility").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@visibility" -> _ },
        (node \ "@{http://schema.omg.org/spec/XMI/2.1}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{http://schema.omg.org/spec/XMI/2.1}type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: umlxmi2pt1.Model2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@visibility", _) => attr = scala.xml.Attribute(null, "visibility", __obj.visibility.toString, attr)
        case ("@{http://schema.omg.org/spec/XMI/2.1}type", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://schema.omg.org/spec/XMI/2.1"), "type", __obj.xmitype.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: umlxmi2pt1.Model2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[umlxmi2pt1.PackagedElement](__obj.packagedElement, Some("http://schema.omg.org/spec/XMI/2.1"), Some("packagedElement"), __scope, false))

  }


}

