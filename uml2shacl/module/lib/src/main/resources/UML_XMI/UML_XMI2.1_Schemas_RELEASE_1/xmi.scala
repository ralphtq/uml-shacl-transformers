// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package umlxmi2pt1


case class Connectors(connector: Seq[umlxmi2pt1.Connector] = Nil)
      


case class Connector(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val name = attributes.get("@name") map { _.as[String]}
}

      


case class PackagedElement(packagedelementoption: Seq[scalaxb.DataRecord[umlxmi2pt1.PackagedElementOption]] = Nil,
  packagedelementoption2: Seq[scalaxb.DataRecord[umlxmi2pt1.PackagedElementOption2]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption {
  lazy val client = attributes.get("@client") map { _.as[String]}
  lazy val isAbstract = attributes.get("@isAbstract") map { _.as[String]}
  lazy val memberEnd = attributes.get("@memberEnd") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val supplier = attributes.get("@supplier") map { _.as[String]}
  lazy val visibility = attributes.get("@visibility") map { _.as[String]}
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      

trait PackagedElementOption4 extends PackagedElementOption2
trait PackagedElementOption
trait PackagedElementOption3 extends PackagedElementOption2
trait PackagedElementOption2

case class OwnedLiteral(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption2 {
  lazy val name = attributes("@name").as[String]
  lazy val visibility = attributes("@visibility").as[String]
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      


case class MemberEnd(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption3 {
  lazy val idref = attributes("@idref").as[String]
}

      


case class OwnedEnd(typeValue: Option[umlxmi2pt1.Type] = None,
  ownedendsequence1: Option[umlxmi2pt1.OwnedEndSequence1] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption3 {
  lazy val aggregation = attributes.get("@aggregation") map { _.as[String]}
  lazy val association = attributes.get("@association") map { _.as[String]}
  lazy val isComposite = attributes.get("@isComposite") map { _.as[String]}
  lazy val isDerived = attributes.get("@isDerived") map { _.as[String]}
  lazy val isDerivedUnion = attributes.get("@isDerivedUnion") map { _.as[String]}
  lazy val isOrdered = attributes.get("@isOrdered") map { _.as[String]}
  lazy val isReadOnly = attributes.get("@isReadOnly") map { _.as[String]}
  lazy val isStatic = attributes.get("@isStatic") map { _.as[String]}
  lazy val isUnique = attributes.get("@isUnique") map { _.as[String]}
  lazy val lower = attributes.get("@lower") map { _.as[BigInt]}
  lazy val memberEnd = attributes.get("@memberEnd") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val upper = attributes.get("@upper") map { _.as[BigInt]}
  lazy val visibility = attributes.get("@visibility") map { _.as[String]}
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes.get("@{http://schema.omg.org/spec/XMI/2.1}type") map { _.as[String]}
}

      

case class OwnedEndSequence1(lowerValue: umlxmi2pt1.LowerValue,
  upperValue: umlxmi2pt1.UpperValue)


case class Generalization(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption4 {
  lazy val general = attributes("@general").as[String]
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      


case class OwnedAttribute(ownedattributeoption: Seq[scalaxb.DataRecord[umlxmi2pt1.OwnedAttributeOption]] = Nil,
  defaultValue: Option[umlxmi2pt1.DefaultValue] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption4 {
  lazy val aggregation = attributes.get("@aggregation") map { _.as[String]}
  lazy val association = attributes.get("@association") map { _.as[String]}
  lazy val isDerived = attributes.get("@isDerived") map { _.as[String]}
  lazy val isDerivedUnion = attributes.get("@isDerivedUnion") map { _.as[String]}
  lazy val isOrdered = attributes.get("@isOrdered") map { _.as[String]}
  lazy val isReadOnly = attributes.get("@isReadOnly") map { _.as[String]}
  lazy val isStatic = attributes.get("@isStatic") map { _.as[String]}
  lazy val isUnique = attributes.get("@isUnique") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val visibility = attributes.get("@visibility") map { _.as[String]}
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      

trait OwnedAttributeOption

case class DefaultValue(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val valueAttribute = attributes("@value").as[String]
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      


case class Elements(element: Seq[umlxmi2pt1.Element] = Nil)
      


case class Element(elementsequence1: Option[umlxmi2pt1.ElementSequence1] = None,
  modelDocument: Option[umlxmi2pt1.ModelDocument] = None,
  elementsequence2: Option[umlxmi2pt1.ElementSequence2] = None,
  elementsequence3: Option[umlxmi2pt1.ElementSequence3] = None,
  attributes: Option[umlxmi2pt1.AttributesType] = None,
  links: Option[umlxmi2pt1.Links] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val geometry = attributes.get("@geometry") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val scope = attributes.get("@scope") map { _.as[String]}
  lazy val seqno = attributes.get("@seqno") map { _.as[BigInt]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val subject = attributes.get("@subject") map { _.as[String]}
  lazy val idref = attributes("@idref").as[String]
  lazy val xmitype = attributes.get("@{http://schema.omg.org/spec/XMI/2.1}type") map { _.as[String]}
}

      

case class ElementSequence2(tags: umlxmi2pt1.Tags,
  xrefs: umlxmi2pt1.Xrefs,
  extendedProperties: umlxmi2pt1.ExtendedProperties)

case class ElementSequence3(packageproperties: umlxmi2pt1.Packageproperties,
  paths: umlxmi2pt1.Paths,
  times: umlxmi2pt1.Times,
  flags: umlxmi2pt1.Flags)

case class ElementSequence1(model: umlxmi2pt1.Model,
  properties: umlxmi2pt1.Properties,
  project: umlxmi2pt1.Project,
  code: umlxmi2pt1.Code,
  style: umlxmi2pt1.Style)


case class Code(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val gentype = attributes.get("@gentype") map { _.as[String]}
  lazy val product_name = attributes.get("@product_name") map { _.as[String]}
}

      


case class ModelDocument(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val author = attributes("@author").as[String]
  lazy val date = attributes("@date").as[String]
  lazy val docid = attributes("@docid").as[String]
  lazy val elementtype = attributes("@elementtype").as[String]
  lazy val isactive = attributes("@isactive").as[BigInt]
  lazy val name = attributes("@name").as[String]
  lazy val notes = attributes("@notes").as[String]
  lazy val sequence = attributes("@sequence").as[BigInt]
  lazy val strcontent = attributes("@strcontent").as[String]
  lazy val style = attributes("@style").as[String]
  lazy val typeValue = attributes("@type").as[String]
  lazy val version = attributes("@version").as[String]
}

      


case class Packageproperties(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val version = attributes.get("@version") map { _.as[BigDecimal]}
}

      


case class Paths()
      


case class Times(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val created = attributes("@created").as[String]
  lazy val lastloaddate = attributes.get("@lastloaddate") map { _.as[String]}
  lazy val lastsavedate = attributes.get("@lastsavedate") map { _.as[String]}
  lazy val modified = attributes("@modified").as[String]
}

      


case class Flags(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val batchload = attributes.get("@batchload") map { _.as[BigInt]}
  lazy val batchsave = attributes.get("@batchsave") map { _.as[BigInt]}
  lazy val iscontrolled = attributes("@iscontrolled").as[String]
  lazy val isnamespace = attributes.get("@isnamespace") map { _.as[BigInt]}
  lazy val isprotected = attributes("@isprotected").as[String]
  lazy val logxml = attributes("@logxml").as[String]
  lazy val packageFlags = attributes.get("@packageFlags") map { _.as[String]}
  lazy val usedtd = attributes("@usedtd").as[String]
}

      


case class AttributesType(attribute: Seq[umlxmi2pt1.Attribute] = Nil)
      


case class Attribute(initial: umlxmi2pt1.Initial,
  documentation: umlxmi2pt1.Documentation,
  model: umlxmi2pt1.Model,
  properties: umlxmi2pt1.Properties,
  coords: umlxmi2pt1.Coords,
  containment: umlxmi2pt1.Containment,
  stereotype: umlxmi2pt1.Stereotype,
  bounds: umlxmi2pt1.Bounds,
  options: umlxmi2pt1.Options,
  style: umlxmi2pt1.Style,
  styleex: umlxmi2pt1.Styleex,
  tags: umlxmi2pt1.Tags,
  xrefs: umlxmi2pt1.Xrefs,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val name = attributes("@name").as[String]
  lazy val scope = attributes("@scope").as[String]
  lazy val idref = attributes("@idref").as[String]
}

      


case class Initial(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val body = attributes.get("@body") map { _.as[String]}
}

      


case class Coords(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val ordered = attributes("@ordered").as[BigInt]
  lazy val scale = attributes("@scale").as[BigInt]
}

      


case class Containment(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val containment = attributes.get("@containment") map { _.as[String]}
  lazy val position = attributes("@position").as[BigInt]
}

      


case class Stereotype(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val stereotype = attributes.get("@stereotype") map { _.as[String]}
}

      


case class Bounds(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val lower = attributes("@lower").as[BigInt]
  lazy val upper = attributes("@upper").as[String]
}

      


case class Options()
      


case class Styleex(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


case class Links(linksoption: Seq[scalaxb.DataRecord[umlxmi2pt1.LinksOption]] = Nil)
      

trait LinksOption

case class Abstraction(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends LinksOption {
  lazy val end = attributes("@end").as[String]
  lazy val start = attributes("@start").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class Aggregation(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends LinksOption {
  lazy val end = attributes("@end").as[String]
  lazy val start = attributes("@start").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class Association(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends LinksOption {
  lazy val end = attributes("@end").as[String]
  lazy val start = attributes("@start").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class Dependency(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends LinksOption {
  lazy val end = attributes("@end").as[String]
  lazy val start = attributes("@start").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class Generalization2(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends LinksOption {
  lazy val end = attributes("@end").as[String]
  lazy val start = attributes("@start").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class NoteLink(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends LinksOption {
  lazy val end = attributes("@end").as[String]
  lazy val start = attributes("@start").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class Model(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val ea_eleType = attributes.get("@ea_eleType") map { _.as[String]}
  lazy val ea_guid = attributes.get("@ea_guid") map { _.as[String]}
  lazy val ea_localid = attributes.get("@ea_localid") map { _.as[BigInt]}
  lazy val localID = attributes.get("@localID") map { _.as[BigInt]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val owner = attributes.get("@owner") map { _.as[String]}
  lazy val packageValue = attributes.get("@package") map { _.as[String]}
  lazy val package2 = attributes.get("@package2") map { _.as[String]}
  lazy val tpos = attributes.get("@tpos") map { _.as[BigInt]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
}

      


case class Role(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val targetScope = attributes.get("@targetScope") map { _.as[String]}
  lazy val visibility = attributes("@visibility").as[String]
}

      


case class Type(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends OwnedAttributeOption {
  lazy val aggregation = attributes.get("@aggregation") map { _.as[String]}
  lazy val containment = attributes.get("@containment") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val multiplicity = attributes.get("@multiplicity") map { _.as[String]}
  lazy val idref = attributes("@idref").as[String]
}

      


case class Constraints()
      


case class Modifiers(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val changeable = attributes.get("@changeable") map { _.as[String]}
  lazy val isLeaf = attributes.get("@isLeaf") map { _.as[String]}
  lazy val isNavigable = attributes.get("@isNavigable") map { _.as[String]}
  lazy val isOrdered = attributes.get("@isOrdered") map { _.as[String]}
  lazy val isRoot = attributes.get("@isRoot") map { _.as[String]}
}

      


case class Style(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val appearance = attributes.get("@appearance") map { _.as[String]}
  lazy val object_style = attributes.get("@object_style") map { _.as[String]}
  lazy val styleex = attributes.get("@styleex") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


case class Documentation(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


case class Xrefs(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


case class Tags(tag: Seq[umlxmi2pt1.Tag] = Nil)
      


case class Tag(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val modelElement = attributes.get("@modelElement") map { _.as[String]}
  lazy val name = attributes("@name").as[String]
  lazy val notes = attributes.get("@notes") map { _.as[String]}
  lazy val valueAttribute = attributes("@value").as[String]
  lazy val id = attributes("@id").as[String]
}

      


case class Properties(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val alias = attributes.get("@alias") map { _.as[java.net.URI]}
  lazy val changeability = attributes.get("@changeability") map { _.as[String]}
  lazy val collection = attributes.get("@collection") map { _.as[String]}
  lazy val derived = attributes.get("@derived") map { _.as[BigInt]}
  lazy val direction = attributes.get("@direction") map { _.as[String]}
  lazy val documentation = attributes.get("@documentation") map { _.as[String]}
  lazy val duplicates = attributes.get("@duplicates") map { _.as[BigInt]}
  lazy val ea_type = attributes.get("@ea_type") map { _.as[String]}
  lazy val isAbstract = attributes.get("@isAbstract") map { _.as[String]}
  lazy val isActive = attributes.get("@isActive") map { _.as[String]}
  lazy val isLeaf = attributes.get("@isLeaf") map { _.as[String]}
  lazy val isRoot = attributes.get("@isRoot") map { _.as[String]}
  lazy val isSpecification = attributes.get("@isSpecification") map { _.as[String]}
  lazy val length = attributes.get("@length") map { _.as[BigInt]}
  lazy val nType = attributes.get("@nType") map { _.as[BigInt]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val precision = attributes.get("@precision") map { _.as[BigInt]}
  lazy val sType = attributes.get("@sType") map { _.as[String]}
  lazy val scope = attributes.get("@scope") map { _.as[String]}
  lazy val static = attributes.get("@static") map { _.as[BigInt]}
  lazy val stereotype = attributes.get("@stereotype") map { _.as[String]}
  lazy val subtype = attributes.get("@subtype") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
}

      


case class ExtendedProperties(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val conditional = attributes.get("@conditional") map { _.as[String]}
  lazy val package_name = attributes.get("@package_name") map { _.as[String]}
  lazy val tagged = attributes.get("@tagged") map { _.as[BigInt]}
  lazy val virtualInheritance = attributes.get("@virtualInheritance") map { _.as[BigInt]}
}

      


case class OwnedComment(ownedcommentoption: Option[scalaxb.DataRecord[Any]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends PackagedElementOption {
  lazy val annotatedElement = attributes.get("@annotatedElement") map { _.as[String]}
  lazy val body = attributes.get("@body") map { _.as[String]}
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      

trait OwnedCommentOption

case class AnnotatedElement(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val idref = attributes("@idref").as[String]
}

      


case class Project(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val author = attributes.get("@author") map { _.as[String]}
  lazy val complexity = attributes.get("@complexity") map { _.as[BigInt]}
  lazy val created = attributes("@created").as[String]
  lazy val modified = attributes("@modified").as[String]
  lazy val phase = attributes.get("@phase") map { _.as[BigDecimal]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val version = attributes.get("@version") map { _.as[BigDecimal]}
}

      


case class LowerValue(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends OwnedAttributeOption {
  lazy val valueAttribute = attributes("@value").as[BigInt]
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      


case class UpperValue(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends OwnedAttributeOption {
  lazy val valueAttribute = attributes("@value").as[BigInt]
  lazy val id = attributes("@id").as[String]
  lazy val xmitype = attributes("@{http://schema.omg.org/spec/XMI/2.1}type").as[String]
}

      


case class Idref1(idref: String)


case class Id(id: String)


case class Idref(idref: String)


case class Id2(id: String)


case class Id1(id: String)

